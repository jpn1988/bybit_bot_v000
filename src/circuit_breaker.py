#!/usr/bin/env python3
"""
Circuit Breaker pour la gestion des erreurs r√©p√©t√©es et rate limiting.

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üìñ GUIDE DE LECTURE                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Le Circuit Breaker est un pattern de r√©silience qui prot√®ge votre syst√®me
contre les appels r√©p√©t√©s √† un service d√©faillant.

üéØ POURQUOI C'EST IMPORTANT :

Sans Circuit Breaker :
- Le bot continue √† faire des appels API m√™me si l'API est down
- Gaspillage de ressources (CPU, network, rate limits)
- D√©lais d'attente inutiles (timeouts r√©p√©t√©s)
- Risque de ban pour trop de requ√™tes

Avec Circuit Breaker :
- ‚úÖ D√©tection rapide des pannes (API down, rate limit)
- ‚úÖ Arr√™t temporaire des appels pour laisser le service r√©cup√©rer
- ‚úÖ Test de r√©cup√©ration automatique (half-open)
- ‚úÖ Protection du rate limit et des ressources

üîç COMPRENDRE EN 3 MINUTES :

1. √âtats du Circuit Breaker (lignes 85-104)
   - CLOSED : Normal, tout fonctionne
   - OPEN : Trop d'erreurs, on bloque les appels
   - HALF_OPEN : Test de r√©cup√©ration

2. Transition d'√©tats (lignes 106-145)
   - CLOSED ‚Üí OPEN : Apr√®s N √©checs cons√©cutifs
   - OPEN ‚Üí HALF_OPEN : Apr√®s timeout
   - HALF_OPEN ‚Üí CLOSED : Apr√®s succ√®s
   - HALF_OPEN ‚Üí OPEN : Apr√®s √©chec

3. Utilisation (lignes 200-250)
   ‚îî‚îÄ> Wrapper autour des appels API

üìö EXEMPLE D'UTILISATION :

```python
from circuit_breaker import CircuitBreaker

# Cr√©er un circuit breaker
cb = CircuitBreaker(
    failure_threshold=5,      # Ouvrir apr√®s 5 √©checs
    timeout_seconds=60,       # R√©essayer apr√®s 60s
    name="BybitAPI"
)

# Wrapper une fonction
def fetch_data():
    response = requests.get("https://api.bybit.com/...")
    return response.json()

# Appeler avec protection
try:
    result = cb.call(fetch_data)
    print(f"Succ√®s: {result}")
except CircuitBreakerOpen as e:
    print(f"Circuit ouvert: {e}")
```

üîÑ FLUX DES √âTATS :

```
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ CLOSED  ‚îÇ  ‚Üê √âtat initial (tout va bien)
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         ‚îÇ
         ‚îÇ (5 √©checs)
         ‚ñº
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ  OPEN   ‚îÇ  ‚Üê Bloque tous les appels
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         ‚îÇ
         ‚îÇ (60s timeout)
         ‚ñº
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇHALF_OPEN ‚îÇ  ‚Üê Test 1 appel
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îò
          ‚îÇ
          ‚îú‚îÄ Succ√®s ‚îÄ‚îÄ> CLOSED
          ‚îÇ
          ‚îî‚îÄ √âchec ‚îÄ‚îÄ‚îÄ> OPEN
```

‚ö° CAS D'USAGE DANS LE BOT :

1. **Rate Limiting API :**
   - 5 erreurs 429 consecutives ‚Üí OPEN (stop les appels)
   - Attente 60s ‚Üí HALF_OPEN (test 1 appel)
   - Succ√®s ‚Üí CLOSED (reprend normal)

2. **API Down :**
   - 5 timeouts cons√©cutifs ‚Üí OPEN
   - √âvite de bombarder une API morte

3. **Erreurs Serveur :**
   - 5 erreurs 5xx ‚Üí OPEN
   - Laisse le temps au serveur de r√©cup√©rer

üìñ R√âF√âRENCES :
- Pattern Circuit Breaker: https://martinfowler.com/bliki/CircuitBreaker.html
- Netflix Hystrix: https://github.com/Netflix/Hystrix
"""

import time
import threading
from enum import Enum
from typing import Callable, Any, Optional
from logging_setup import setup_logging


class CircuitState(Enum):
    """
    √âtats possibles du Circuit Breaker.
    
    CLOSED : Circuit ferm√©, tout fonctionne normalement
             - Les appels passent sans restriction
             - Compte les √©checs
             - Passe √† OPEN apr√®s N √©checs
             
    OPEN : Circuit ouvert, trop d'√©checs d√©tect√©s
           - Tous les appels sont bloqu√©s
           - Retourne imm√©diatement une erreur
           - Passe √† HALF_OPEN apr√®s timeout
           
    HALF_OPEN : Circuit semi-ouvert, test de r√©cup√©ration
                - Autorise UN seul appel de test
                - Si succ√®s ‚Üí CLOSED
                - Si √©chec ‚Üí OPEN
    """
    CLOSED = "closed"       # Normal - appels autoris√©s
    OPEN = "open"           # Erreurs d√©tect√©es - appels bloqu√©s
    HALF_OPEN = "half_open" # Test de r√©cup√©ration - 1 appel


class CircuitBreakerOpen(Exception):
    """
    Exception lev√©e quand le circuit breaker est ouvert.
    
    Cette exception indique que le service est consid√©r√© comme indisponible
    et que les appels sont temporairement bloqu√©s.
    
    Example:
        ```python
        try:
            result = circuit_breaker.call(my_function)
        except CircuitBreakerOpen:
            # Utiliser un fallback ou notifier l'utilisateur
            logger.warning("Service temporairement indisponible")
        ```
    """
    pass


class CircuitBreaker:
    """
    Circuit Breaker pattern pour prot√©ger contre les appels r√©p√©t√©s √† un service d√©faillant.
    
    Le circuit breaker suit les √©checs et ouvre le circuit (bloque les appels)
    apr√®s un certain nombre d'√©checs cons√©cutifs. Apr√®s un timeout, il teste
    la r√©cup√©ration du service.
    
    Attributes:
        failure_threshold (int): Nombre d'√©checs avant ouverture
        timeout_seconds (int): Temps d'attente avant test de r√©cup√©ration
        name (str): Nom du circuit pour les logs
        state (CircuitState): √âtat actuel du circuit
        failure_count (int): Nombre d'√©checs cons√©cutifs
        last_failure_time (float): Timestamp du dernier √©chec
        
    Example:
        ```python
        # Circuit pour l'API Bybit
        api_breaker = CircuitBreaker(
            failure_threshold=5,    # Ouvrir apr√®s 5 √©checs
            timeout_seconds=60,     # R√©essayer apr√®s 1 minute
            name="BybitAPI"
        )
        
        # Utiliser le circuit
        def fetch_tickers():
            response = requests.get("https://api.bybit.com/v5/market/tickers")
            return response.json()
        
        try:
            data = api_breaker.call(fetch_tickers)
        except CircuitBreakerOpen:
            logger.warning("API temporairement indisponible")
        ```
        
    Thread Safety:
        - ‚úÖ Thread-safe via threading.Lock
        - ‚úÖ Plusieurs threads peuvent partager le m√™me circuit
        - ‚úÖ Les transitions d'√©tat sont atomiques
    """

    def __init__(
        self,
        failure_threshold: int = 5,
        timeout_seconds: int = 60,
        name: str = "CircuitBreaker",
        logger: Optional[object] = None,
    ):
        """
        Initialise le Circuit Breaker.
        
        Args:
            failure_threshold (int): Nombre d'√©checs cons√©cutifs avant ouverture
                                    Exemple: 5 = ouvre apr√®s 5 √©checs
            timeout_seconds (int): Secondes avant test de r√©cup√©ration
                                  Exemple: 60 = r√©essaie apr√®s 1 minute
            name (str): Nom du circuit pour identification dans les logs
            logger: Logger optionnel pour les √©v√©nements du circuit
            
        Example:
            ```python
            # Circuit conservateur (tol√®re peu d'erreurs)
            strict_breaker = CircuitBreaker(
                failure_threshold=3,
                timeout_seconds=30,
                name="StrictAPI"
            )
            
            # Circuit tol√©rant (pour API instable)
            lenient_breaker = CircuitBreaker(
                failure_threshold=10,
                timeout_seconds=120,
                name="UnstableAPI"
            )
            ```
        """
        self.failure_threshold = failure_threshold
        self.timeout_seconds = timeout_seconds
        self.name = name
        self.logger = logger or setup_logging()
        
        # √âtat du circuit
        self.state = CircuitState.CLOSED
        self.failure_count = 0
        self.last_failure_time: Optional[float] = None
        
        # Lock pour thread-safety
        self._lock = threading.Lock()
        
        self.logger.debug(
            f"üîå Circuit Breaker '{name}' initialis√© "
            f"(seuil={failure_threshold}, timeout={timeout_seconds}s)"
        )

    def call(self, func: Callable[..., Any], *args, **kwargs) -> Any:
        """
        Appelle une fonction avec protection du Circuit Breaker.
        
        Cette m√©thode wrappe l'appel de fonction avec la logique du circuit :
        - Si OPEN : l√®ve CircuitBreakerOpen
        - Si HALF_OPEN : tente l'appel (test de r√©cup√©ration)
        - Si CLOSED : appelle normalement
        
        Args:
            func: Fonction √† appeler
            *args: Arguments positionnels de la fonction
            **kwargs: Arguments nomm√©s de la fonction
            
        Returns:
            R√©sultat de la fonction si succ√®s
            
        Raises:
            CircuitBreakerOpen: Si le circuit est ouvert
            Exception: Toute exception lev√©e par func
            
        Example:
            ```python
            circuit = CircuitBreaker(name="API")
            
            # Appel simple
            result = circuit.call(requests.get, "https://api.com/data")
            
            # Avec kwargs
            result = circuit.call(
                requests.post,
                "https://api.com/submit",
                json={"key": "value"},
                timeout=10
            )
            ```
        """
        with self._lock:
            # V√©rifier l'√©tat avant l'appel
            self._check_state()
            
            # Si OPEN, bloquer l'appel
            if self.state == CircuitState.OPEN:
                raise CircuitBreakerOpen(
                    f"Circuit Breaker '{self.name}' est ouvert - "
                    f"Service temporairement indisponible"
                )
        
        # Effectuer l'appel (hors du lock pour ne pas bloquer)
        try:
            result = func(*args, **kwargs)
            self._on_success()
            return result
            
        except Exception as e:
            self._on_failure(e)
            raise

    def _check_state(self):
        """
        V√©rifie et met √† jour l'√©tat du circuit si n√©cessaire.
        
        Transitions possibles :
        - OPEN ‚Üí HALF_OPEN : Si timeout √©coul√©
        
        Note:
            - Doit √™tre appel√© dans un contexte avec _lock
            - Les autres transitions sont g√©r√©es par on_success/on_failure
        """
        if self.state == CircuitState.OPEN:
            # V√©rifier si on peut tenter une r√©cup√©ration
            if self._should_attempt_reset():
                self.state = CircuitState.HALF_OPEN
                self.logger.info(
                    f"üîÑ Circuit '{self.name}' passe en HALF_OPEN "
                    f"(test de r√©cup√©ration)"
                )

    def _should_attempt_reset(self) -> bool:
        """
        D√©termine si on peut tenter de r√©initialiser le circuit.
        
        Returns:
            True si le timeout est √©coul√© depuis le dernier √©chec
        """
        if self.last_failure_time is None:
            return True
        
        elapsed = time.time() - self.last_failure_time
        return elapsed >= self.timeout_seconds

    def _on_success(self):
        """
        G√®re un appel r√©ussi.
        
        Actions selon l'√©tat :
        - CLOSED : R√©initialise le compteur d'√©checs
        - HALF_OPEN : Ferme le circuit (r√©cup√©ration confirm√©e)
        - OPEN : N/A (ne devrait pas arriver ici)
        """
        with self._lock:
            if self.state == CircuitState.HALF_OPEN:
                # R√©cup√©ration r√©ussie !
                self.state = CircuitState.CLOSED
                self.failure_count = 0
                self.logger.info(
                    f"‚úÖ Circuit '{self.name}' ferm√© - "
                    f"Service r√©cup√©r√©"
                )
            elif self.state == CircuitState.CLOSED:
                # Reset du compteur en cas de succ√®s
                self.failure_count = 0

    def _on_failure(self, error: Exception):
        """
        G√®re un √©chec d'appel.
        
        Actions selon l'√©tat :
        - CLOSED : Incr√©mente compteur, ouvre si seuil atteint
        - HALF_OPEN : Ouvre imm√©diatement (r√©cup√©ration √©chou√©e)
        - OPEN : N/A (ne devrait pas arriver ici)
        
        Args:
            error: Exception qui a caus√© l'√©chec
        """
        with self._lock:
            self.failure_count += 1
            self.last_failure_time = time.time()
            
            if self.state == CircuitState.HALF_OPEN:
                # Test de r√©cup√©ration √©chou√©
                self.state = CircuitState.OPEN
                self.logger.warning(
                    f"‚ö†Ô∏è Circuit '{self.name}' r√©ouvert - "
                    f"Test de r√©cup√©ration √©chou√©: {error}"
                )
                
            elif self.state == CircuitState.CLOSED:
                # V√©rifier si seuil atteint
                if self.failure_count >= self.failure_threshold:
                    self.state = CircuitState.OPEN
                    self.logger.error(
                        f"üî¥ Circuit '{self.name}' ouvert - "
                        f"Seuil d'√©checs atteint ({self.failure_count}/{self.failure_threshold}) - "
                        f"Derni√®re erreur: {error}"
                    )

    def reset(self):
        """
        R√©initialise manuellement le circuit breaker.
        
        Force la fermeture du circuit et remet tous les compteurs √† z√©ro.
        Utile pour les tests ou la r√©cup√©ration manuelle.
        
        Example:
            ```python
            # Apr√®s maintenance de l'API
            api_breaker.reset()
            logger.info("Circuit breaker r√©initialis√© manuellement")
            ```
        """
        with self._lock:
            old_state = self.state
            self.state = CircuitState.CLOSED
            self.failure_count = 0
            self.last_failure_time = None
            
            if old_state != CircuitState.CLOSED:
                self.logger.info(
                    f"üîß Circuit '{self.name}' r√©initialis√© manuellement "
                    f"({old_state.value} ‚Üí {CircuitState.CLOSED.value})"
                )

    def get_state(self) -> CircuitState:
        """
        Retourne l'√©tat actuel du circuit.
        
        Returns:
            CircuitState: √âtat actuel (CLOSED, OPEN, ou HALF_OPEN)
            
        Example:
            ```python
            if breaker.get_state() == CircuitState.OPEN:
                logger.warning("Circuit ouvert, utiliser fallback")
            ```
        """
        with self._lock:
            return self.state

    def get_stats(self) -> dict:
        """
        Retourne les statistiques du circuit breaker.
        
        Returns:
            dict: Statistiques contenant :
                - state: √âtat actuel
                - failure_count: Nombre d'√©checs cons√©cutifs
                - failure_threshold: Seuil d'ouverture
                - last_failure_time: Timestamp du dernier √©chec
                - time_until_retry: Secondes avant prochain test (si OPEN)
                
        Example:
            ```python
            stats = breaker.get_stats()
            print(f"√âtat: {stats['state']}")
            print(f"√âchecs: {stats['failure_count']}/{stats['failure_threshold']}")
            ```
        """
        with self._lock:
            stats = {
                "state": self.state.value,
                "failure_count": self.failure_count,
                "failure_threshold": self.failure_threshold,
                "last_failure_time": self.last_failure_time,
            }
            
            # Calculer temps avant retry si OPEN
            if self.state == CircuitState.OPEN and self.last_failure_time:
                elapsed = time.time() - self.last_failure_time
                time_until_retry = max(0, self.timeout_seconds - elapsed)
                stats["time_until_retry"] = round(time_until_retry, 1)
            
            return stats

