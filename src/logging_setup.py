"""Configuration du syst√®me de logging avec loguru."""

import sys
from datetime import datetime
from typing import Dict, Any, Optional
from loguru import logger
from config import get_settings


def setup_logging():
    """Configure le syst√®me de logging avec loguru."""
    # Supprimer le handler par d√©faut
    logger.remove()
    
    # R√©cup√©rer le niveau de log depuis la configuration
    settings = get_settings()
    log_level = settings["log_level"]
    # Fichier de log optionnel
    import os
    log_dir = os.getenv("LOG_DIR", "logs")
    log_file = os.getenv("LOG_FILE", "bybit_bot.log")
    rotation = os.getenv("LOG_ROTATION", "10 MB")
    retention = os.getenv("LOG_RETENTION", "7 days")
    compression = os.getenv("LOG_COMPRESSION", "zip")
    
    # Ajouter un handler avec le format sp√©cifi√©
    logger.add(
        sys.stdout,
        format="{time:YYYY-MM-DD HH:mm:ss} | {level:<7} | {message}",
        level=log_level,
        colorize=True
    )
    try:
        os.makedirs(log_dir, exist_ok=True)
        logger.add(
            f"{log_dir}/{log_file}",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level:<7} | {message}",
            level=log_level,
            rotation=rotation,
            retention=retention,
            compression=compression,
            enqueue=True,
            backtrace=False,
            diagnose=False
        )
    except Exception:
        # Si on ne peut pas cr√©er le fichier, on garde stdout uniquement
        pass
    
    return logger


def log_startup_summary(
    logger,
    bot_info: Dict[str, Any],
    config: Dict[str, Any], 
    filter_results: Dict[str, Any],
    ws_status: Dict[str, Any]
) -> None:
    """
    Affiche un r√©sum√© de d√©marrage professionnel et structur√©.
    
    Args:
        logger: Instance du logger √† utiliser
        bot_info: Informations du bot (nom, version, environnement, mode)
        config: Configuration charg√©e
        filter_results: R√©sultats du filtrage des symboles
        ws_status: Statut des connexions WebSocket
    """
    # Banni√®re d'accueil
    banner_width = 38
    separator = "‚ïê" * banner_width
    
    logger.info(f"\n{separator}")
    logger.info(f" üöÄ {bot_info.get('name', 'BYBIT BOT')} v{bot_info.get('version', '0.9.0')}")
    logger.info(f" üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f" üåç Environnement : {bot_info.get('environment', 'Mainnet')} | Mode: {bot_info.get('mode', 'Funding Sniping')}")
    logger.info(f"{separator}")
    
    # Section v√©rification syst√®me
    logger.info("\nüîç V√©rification syst√®me :")
    system_checks = [
        ("Configuration (src/parameters.yaml)", "OK"),
        ("Gestionnaire HTTP", "OK"),
        ("Orchestrateur", "OK"),
        (f"Monitoring m√©triques ({config.get('metrics_interval', 5)}m)", "OK"),
        ("WebSocket Manager", "pr√™t")
    ]
    
    for i, (check_name, status) in enumerate(system_checks):
        prefix = "‚îî‚îÄ‚îÄ" if i == len(system_checks) - 1 else "‚îú‚îÄ‚îÄ"
        logger.info(f"   {prefix} {check_name} ‚Ä¶ {status}")
    
    # Section param√®tres actifs
    logger.info("\n‚öôÔ∏è Param√®tres actifs :")
    params = [
        ("Cat√©gorie", config.get('categorie', 'linear')),
        ("Funding min", f"{config.get('funding_min', 0.0001):.6f}" if config.get('funding_min') is not None else "none"),
        ("Volume min", f"{config.get('volume_min_millions', 50.0):.1f}M" if config.get('volume_min_millions') is not None else "none"),
        ("Spread max", f"{config.get('spread_max', 0.03)*100:.2f}%" if config.get('spread_max') is not None else "none"),
        ("Volatilit√© max", f"{config.get('volatility_max', 0.07)*100:.2f}%" if config.get('volatility_max') is not None else "none"),
        (f"TTL vol: {config.get('volatility_ttl_sec', 120)}s", f"Interval WS: {config.get('display_interval_seconds', 10)}s")
    ]
    
    for param_name, param_value in params:
        logger.info(f"   ‚Ä¢ {param_name} : {param_value}")
    
    # Section r√©sultats filtrage
    logger.info("\nüìä R√©sultats filtrage :")
    filter_stats = filter_results.get('stats', {})
    logger.info(f"   Avant filtres       : {filter_stats.get('total_symbols', 0)} symboles")
    logger.info(f"   Funding/Volume      : {filter_stats.get('after_funding_volume', 0)}")
    logger.info(f"   Spread              : {filter_stats.get('after_spread', 0)}")
    logger.info(f"   Volatilit√©          : {filter_stats.get('after_volatility', 0)}")
    logger.info(f"   Apr√®s tri+limite    : {filter_stats.get('final_count', 0)}")
    
    # Confirmation op√©rationnelle
    logger.info("\n‚úÖ Initialisation termin√©e.")
    ws_connected = ws_status.get('connected', False)
    symbols_count = ws_status.get('symbols_count', 0)
    category = ws_status.get('category', 'linear')
    
    if ws_connected and symbols_count > 0:
        logger.info(f"üì° WS connect√©e ({category}) | {symbols_count} symboles souscrits")
        logger.info("üèÅ Bot op√©rationnel ‚Äì en attente de ticks‚Ä¶")
    else:
        logger.info("üîÑ Mode surveillance continue activ√©")
        logger.info("üèÅ Bot op√©rationnel ‚Äì en attente de nouvelles opportunit√©s‚Ä¶")
    
    logger.info("")  # Ligne vide finale


def log_shutdown_summary(
    logger,
    last_candidates: list = None,
    uptime_seconds: float = 0.0
) -> None:
    """
    Affiche un r√©sum√© d'arr√™t professionnel et structur√©.
    
    Args:
        logger: Instance du logger √† utiliser
        last_candidates: Liste des derniers candidats surveill√©s
        uptime_seconds: Temps de fonctionnement en secondes
    """
    # Banni√®re d'arr√™t
    banner_width = 38
    separator = "‚ïê" * banner_width
    
    logger.info(f"\n{separator}")
    logger.info(f" üõë ARR√äT DU BOT")
    logger.info(f" üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"{separator}")
    
    # Section √©tapes de shutdown
    logger.info("\nüîª √âtapes de shutdown :")
    shutdown_steps = [
        ("Fermeture WebSockets", "OK"),
        ("Thread volatilit√©", "arr√™t√©"),
        ("Clients HTTP", "ferm√©s"),
        ("Nettoyage final", "termin√©")
    ]
    
    for i, (step_name, status) in enumerate(shutdown_steps):
        prefix = "‚îî‚îÄ‚îÄ" if i == len(shutdown_steps) - 1 else "‚îú‚îÄ‚îÄ"
        logger.info(f"   {prefix} {step_name} ‚Ä¶ {status}")
    
    # Section derniers candidats
    if last_candidates:
        candidates_display = last_candidates[:7]  # Limiter √† 7 candidats
        logger.info(f"\nüéØ Derniers candidats surveill√©s : {candidates_display}")
    
    # Message final avec uptime
    uptime_hours = uptime_seconds / 3600
    uptime_minutes = (uptime_seconds % 3600) / 60
    
    if uptime_hours >= 1:
        uptime_str = f"{uptime_hours:.0f}h{uptime_minutes:.0f}m"
    else:
        uptime_str = f"{uptime_minutes:.0f}m"
    
    logger.info(f"\n‚úÖ Bot arr√™t√© proprement (uptime: {uptime_str})")
    logger.info("")  # Ligne vide finale
