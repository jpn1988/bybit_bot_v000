#!/usr/bin/env python3
"""
Authentification HMAC-SHA256 pour le client Bybit.

Ce module g√®re :
- G√©n√©ration des signatures HMAC-SHA256
- Construction des headers d'authentification
- Validation des credentials
"""

import time
import hashlib
import hmac


class BybitAuthenticator:
    """
    Gestionnaire d'authentification HMAC-SHA256 pour l'API Bybit v5.
    
    Cette classe g√®re la signature des requ√™tes priv√©es selon la sp√©cification
    d'authentification Bybit v5.
    
    Processus d'authentification :
    1. G√©n√©rer un timestamp en millisecondes
    2. Trier les param√®tres par ordre alphab√©tique
    3. Construire le payload : timestamp + api_key + recv_window + query_string
    4. Signer le payload avec HMAC-SHA256 et le secret API
    5. Ajouter les headers : X-BAPI-API-KEY, X-BAPI-SIGN, X-BAPI-TIMESTAMP, etc.
    """
    
    def __init__(self, api_key: str, api_secret: str):
        """
        Initialise l'authenticator.
        
        Args:
            api_key: Cl√© API Bybit
            api_secret: Secret API Bybit
            
        Raises:
            ValueError: Si les credentials sont invalides
        """
        self.validate_credentials(api_key, api_secret)
        self.api_key = api_key
        self.api_secret = api_secret
    
    @staticmethod
    def validate_credentials(api_key: str, api_secret: str):
        """
        Valide les credentials (pas de placeholder).
        
        Args:
            api_key: Cl√© API √† valider
            api_secret: Secret API √† valider
            
        Raises:
            RuntimeError: Si les cl√©s sont manquantes
            ValueError: Si les cl√©s utilisent des valeurs placeholder
        """
        if not api_key or not api_secret:
            raise RuntimeError(
                "üîê Cl√©s API manquantes. Configurez BYBIT_API_KEY et BYBIT_API_SECRET "
                "dans votre fichier .env. Consultez .env.example pour la configuration."
            )
        
        # V√©rifier que les cl√©s ne sont pas des valeurs placeholder
        if api_key == "your_api_key_here" or api_secret == "your_api_secret_here":
            raise ValueError(
                "üîê ERREUR S√âCURIT√â: Vous utilisez les valeurs placeholder par d√©faut.\n"
                "Veuillez configurer vos vraies cl√©s API dans le fichier .env.\n"
                "Obtenez vos cl√©s sur: https://testnet.bybit.com/app/user/api-management"
            )
    
    def build_auth_headers(self, params: dict, json_data: str = None) -> tuple[dict, str]:
        """
        Construit les headers d'authentification HMAC-SHA256 pour une requ√™te priv√©e Bybit v5.
        
        Ce processus suit la sp√©cification d'authentification Bybit v5 :
        1. G√©n√©rer un timestamp en millisecondes
        2. Trier les param√®tres par ordre alphab√©tique (cl√©s)
        3. Construire la query string tri√©e
        4. G√©n√©rer la signature HMAC-SHA256
        5. Construire les headers avec la signature
        
        Format du payload sign√© :
            timestamp + api_key + recv_window + query_string
            
        Exemple :
            params = {"symbol": "BTCUSDT", "category": "linear"}
            ‚Üí query_string = "category=linear&symbol=BTCUSDT"  (ordre alphab√©tique)
            ‚Üí payload = "1712345678000MY_API_KEY10000category=linear&symbol=BTCUSDT"
            ‚Üí signature = HMAC-SHA256(payload, api_secret).hex()

        Args:
            params: Param√®tres de la requ√™te √† envoyer √† l'API
            json_data: Donn√©es JSON pour les requ√™tes POST (optionnel)

        Returns:
            tuple[dict, str]: Tuple contenant :
                - headers (dict) : Headers HTTP avec authentification
                    * X-BAPI-API-KEY : Cl√© API publique
                    * X-BAPI-SIGN : Signature HMAC-SHA256 (hex)
                    * X-BAPI-SIGN-TYPE : Type de signature (2 = HMAC-SHA256)
                    * X-BAPI-TIMESTAMP : Timestamp en millisecondes
                    * X-BAPI-RECV-WINDOW : Fen√™tre de r√©ception (10000ms)
                    * Content-Type : application/json
                - query_string (str) : Param√®tres tri√©s au format "key1=val1&key2=val2"
                
        Note:
            - Le recv_window (10000ms) d√©finit la dur√©e pendant laquelle
              la requ√™te est consid√©r√©e comme valide par Bybit
            - Si l'horloge locale est d√©synchronis√©e, vous obtiendrez retCode=10017
            - Les param√®tres DOIVENT √™tre tri√©s alphab√©tiquement pour la signature
        """
        # G√©n√©rer un timestamp en millisecondes (epoch time * 1000)
        timestamp = int(time.time() * 1000)
        
        # Fen√™tre de r√©ception : dur√©e pendant laquelle la requ√™te est valide
        recv_window_ms = 10000
        
        # Cr√©er la query string tri√©e par ordre alphab√©tique des cl√©s
        query_string = "&".join(
            [f"{k}={v}" for k, v in sorted(params.items())]
        )
        
        # Pour les requ√™tes POST, inclure les donn√©es JSON dans la signature
        if json_data:
            payload_data = json_data
        else:
            payload_data = query_string
        
        # G√©n√©rer la signature HMAC-SHA256 du payload
        signature = self.generate_signature(
            timestamp, recv_window_ms, payload_data
        )
        
        # Construire les headers d'authentification
        headers = {
            "X-BAPI-API-KEY": self.api_key,
            "X-BAPI-SIGN": signature,
            "X-BAPI-SIGN-TYPE": "2",
            "X-BAPI-TIMESTAMP": str(timestamp),
            "X-BAPI-RECV-WINDOW": str(recv_window_ms),
            "Content-Type": "application/json",
        }
        
        return headers, query_string
    
    def generate_signature(
        self, timestamp: int, recv_window_ms: int, query_string: str
    ) -> str:
        """
        G√©n√®re la signature HMAC-SHA256 pour l'authentification Bybit v5.
        
        Cette signature prouve que vous poss√©dez le secret API sans le transmettre.
        Bybit recalcule la signature de son c√¥t√© et la compare avec celle fournie.
        
        Algorithme HMAC-SHA256 :
        1. Construire le payload : timestamp + api_key + recv_window + query_string
        2. Encoder le payload et le secret en UTF-8
        3. Calculer HMAC-SHA256(payload, secret)
        4. Convertir en hexad√©cimal (cha√Æne de 64 caract√®res)
        
        Exemple concret :
            timestamp = 1712345678000
            api_key = "ABCDEF123456"
            recv_window_ms = 10000
            query_string = "category=linear&symbol=BTCUSDT"
            
            ‚Üí payload = "1712345678000ABCDEF12345610000category=linear&symbol=BTCUSDT"
            ‚Üí HMAC-SHA256(payload, secret) ‚Üí "a1b2c3d4e5f6..." (64 caract√®res hex)

        Args:
            timestamp: Timestamp en millisecondes (epoch time * 1000)
            recv_window_ms: Fen√™tre de r√©ception en millisecondes (ex: 10000)
            query_string: Param√®tres tri√©s au format "key1=val1&key2=val2"

        Returns:
            str: Signature HMAC-SHA256 en hexad√©cimal (64 caract√®res)
                
        Note:
            - La signature est unique pour chaque requ√™te (timestamp diff√©rent)
            - Si le payload ou le secret change, la signature sera diff√©rente
            - Bybit rejette les requ√™tes avec une mauvaise signature (retCode=10005/10006)
            - Si l'horloge locale est d√©synchronis√©e, vous obtiendrez retCode=10017
            
        Security:
            - Le secret API n'est JAMAIS envoy√© sur le r√©seau
            - Seule la signature (d√©riv√©e du secret) est transmise
            - Sans le secret, impossible de g√©n√©rer une signature valide
        """
        # Construire le payload selon le format Bybit v5
        payload = f"{timestamp}{self.api_key}{recv_window_ms}{query_string}"
        
        # Calculer la signature HMAC-SHA256
        return hmac.new(
            self.api_secret.encode("utf-8"),
            payload.encode("utf-8"),
            hashlib.sha256,
        ).hexdigest()

