#!/usr/bin/env python3
"""
Planificateur de volatilit√© pour le bot Bybit.

Cette classe g√®re uniquement :
- Le rafra√Æchissement p√©riodique des donn√©es de volatilit√©
- La gestion des threads de rafra√Æchissement
- La coordination des cycles de rafra√Æchissement
"""

import time
import threading
import concurrent.futures
import asyncio
from typing import List, Optional, Callable, Dict
from logging_setup import setup_logging
from volatility import VolatilityCalculator
from volatility_cache import VolatilityCache
from config.timeouts import TimeoutConfig


class VolatilityScheduler:
    """
    Planificateur de volatilit√© pour le bot Bybit.

    Responsabilit√©s :
    - Rafra√Æchissement p√©riodique des donn√©es de volatilit√©
    - Gestion des threads de rafra√Æchissement
    - Coordination des cycles de rafra√Æchissement
    """

    def __init__(
        self,
        calculator: VolatilityCalculator,
        cache: VolatilityCache,
        logger=None,
    ):
        """
        Initialise le planificateur de volatilit√©.

        Args:
            calculator: Calculateur de volatilit√©
            cache: Cache de volatilit√©
            logger: Logger pour les messages (optionnel)
        """
        self.calculator = calculator
        self.cache = cache
        self.logger = logger or setup_logging()

        # Thread de rafra√Æchissement
        self._refresh_thread: Optional[threading.Thread] = None
        self._running = False
        
        # Event loop persistant pour √©viter la cr√©ation/destruction r√©p√©t√©e
        self._thread_loop: Optional[asyncio.AbstractEventLoop] = None

        # Callback pour obtenir la liste des symboles actifs
        self._get_active_symbols_callback: Optional[
            Callable[[], List[str]]
        ] = None

    def set_active_symbols_callback(self, callback: Callable[[], List[str]]):
        """
        D√©finit le callback pour obtenir la liste des symboles actifs.

        Args:
            callback: Fonction qui retourne la liste des symboles actifs
        """
        self._get_active_symbols_callback = callback

    def start_refresh_task(self):
        """D√©marre la t√¢che de rafra√Æchissement automatique."""
        if self._refresh_thread and self._refresh_thread.is_alive():
            self.logger.info("‚ÑπÔ∏è Thread volatilit√© d√©j√† actif")
            return

        self._running = True
        self._refresh_thread = threading.Thread(target=self._refresh_loop)
        self._refresh_thread.daemon = True
        self._refresh_thread.start()

        # Thread volatilit√© d√©marr√©

    def stop_refresh_task(self):
        """
        Arr√™te la t√¢che de rafra√Æchissement de mani√®re plus robuste.
        
        CORRECTIF : N'attend plus le thread car il peut √™tre bloqu√© dans
        un calcul de volatilit√© qui prend 30-45 secondes. Le thread daemon
        sera automatiquement tu√© par Python lors de la fermeture.
        """
        self._running = False

        # Ne pas faire de join() car le thread peut √™tre bloqu√© dans
        # un calcul de volatilit√© long (30-45s avec timeout).
        # Comme c'est un thread daemon, Python le tuera automatiquement.
        # Les v√©rifications de self._running dans le code emp√™chent
        # de nouvelles op√©rations co√ªteuses.
        
        if self._refresh_thread and self._refresh_thread.is_alive():
            self.logger.debug("üõë Thread volatilit√© marqu√© pour arr√™t (daemon)")

        # Nettoyer la r√©f√©rence du thread
        self._refresh_thread = None
        # Thread volatilit√© arr√™t√©

    def _refresh_loop(self):
        """Boucle de rafra√Æchissement p√©riodique du cache de volatilit√©."""
        refresh_interval = self._calculate_refresh_interval()
        
        # OPTIMISATION: Cr√©er l'event loop une seule fois pour le thread
        # au lieu de le cr√©er/d√©truire √† chaque calcul de volatilit√©
        self._thread_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(self._thread_loop)
        
        try:
            while self._running:
                try:
                    # CORRECTIF : V√©rifier √† chaque d√©but de cycle
                    if not self._running:
                        break
                    
                    # Obtenir les symboles √† rafra√Æchir
                    symbols_to_refresh = self._get_symbols_to_refresh()

                    if not symbols_to_refresh:
                        if not self._running:
                            break
                        from config.timeouts import TimeoutConfig
                        time.sleep(TimeoutConfig.VOLATILITY_RETRY_SLEEP)
                        continue

                    # CORRECTIF : Derni√®re v√©rification avant le cycle co√ªteux
                    if not self._running:
                        break

                    # Effectuer le cycle de rafra√Æchissement
                    self._perform_refresh_cycle(symbols_to_refresh)

                except Exception as e:
                    # CORRECTIF : Ne pas logger les erreurs pendant l'arr√™t
                    if self._running:
                        try:
                            self.logger.warning(f"‚ö†Ô∏è Erreur refresh volatilit√©: {e}")
                        except (ValueError, RuntimeError):
                            # Logging d√©sactiv√©, arr√™t en cours
                            break
                    else:
                        # Arr√™t en cours, ignorer silencieusement
                        break
                    from config.timeouts import TimeoutConfig
                    time.sleep(TimeoutConfig.VOLATILITY_RETRY_SLEEP)

                # Attendre l'intervalle de rafra√Æchissement avec v√©rification d'interruption
                self._wait_for_next_cycle(refresh_interval)
                
        finally:
            # NETTOYAGE: Fermer l'event loop persistant
            if self._thread_loop and not self._thread_loop.is_closed():
                try:
                    self._thread_loop.close()
                except Exception:
                    pass  # Ignorer les erreurs de fermeture
            asyncio.set_event_loop(None)
            self._thread_loop = None

    def _calculate_refresh_interval(self) -> int:
        """
        Calcule l'intervalle de rafra√Æchissement optimal.

        Returns:
            Intervalle en secondes (entre 30 et 60s)
        """
        return max(
            20, min(40, self.cache.ttl_seconds - 10)
        )  # Intervalle plus court : 20-40s

    def _get_symbols_to_refresh(self) -> List[str]:
        """
        R√©cup√®re la liste des symboles actifs √† rafra√Æchir.

        Returns:
            Liste des symboles ou liste vide si erreur
        """
        if not self._get_active_symbols_callback:
            return []

        try:
            return self._get_active_symbols_callback()
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Erreur callback symboles actifs: {e}")
            return []

    def _perform_refresh_cycle(self, symbols: List[str]):
        """
        Effectue un cycle complet de rafra√Æchissement de volatilit√©.

        Args:
            symbols: Liste des symboles √† rafra√Æchir
        """
        # CORRECTIF : V√©rifier si on est en train de s'arr√™ter
        if not self._running:
            return
        
        # Calculer la volatilit√© pour tous les symboles
        results = self._run_async_volatility_batch(symbols)

        # V√©rifier si on est toujours en cours d'ex√©cution
        if not self._running:
            return

        # Mettre √† jour le cache avec les r√©sultats
        now_ts = time.time()
        ok_count, fail_count = self.cache.update_cache_with_results(
            results, now_ts
        )

        # CORRECTIF : Ne logger que si on tourne encore ET que le logging fonctionne
        if self._running:
            try:
                self.logger.info(
                    f"‚úÖ Refresh volatilit√© termin√©: ok={ok_count} | fail={fail_count}"
                )
            except (ValueError, RuntimeError):
                # Logging d√©sactiv√© ou arr√™t en cours, ignorer
                pass

        # Retry pour les symboles en √©chec
        failed_symbols = [s for s, v in results.items() if v is None]
        if failed_symbols and self._running:
            self._retry_failed_symbols(failed_symbols, now_ts)

        # Nettoyer le cache des symboles non suivis
        if self._running:
            self.cache.clear_stale_cache(symbols)

    def _run_async_volatility_batch(
        self, symbols: List[str]
    ) -> Dict[str, Optional[float]]:
        """
        Ex√©cute le calcul de volatilit√© en batch en utilisant l'event loop persistant.
        
        OPTIMISATION: Utilise l'event loop du thread au lieu d'en cr√©er un nouveau
        √† chaque calcul, ce qui r√©duit l'overhead de cr√©ation/destruction.

        Args:
            symbols: Liste des symboles

        Returns:
            Dictionnaire {symbol: volatility_pct}
        """
        # CORRECTIF : V√©rifier si on est en train de s'arr√™ter
        if not self._running:
            return {symbol: None for symbol in symbols}
        
        # V√©rifier que l'event loop persistant est disponible
        if not self._thread_loop or self._thread_loop.is_closed():
            self.logger.warning("‚ö†Ô∏è Event loop volatilit√© non disponible")
            return {symbol: None for symbol in symbols}
        
        try:
            # OPTIMISATION: Utiliser l'event loop persistant du thread
            return self._thread_loop.run_until_complete(
                self.calculator.compute_volatility_batch(symbols)
            )
        except Exception as e:
            # CORRECTIF : V√©rifier si c'est une erreur d'arr√™t
            if not self._running:
                return {symbol: None for symbol in symbols}
            
            error_msg = str(e).lower()
            if "interpreter shutdown" in error_msg or "cannot schedule" in error_msg:
                # Arr√™t en cours, ne pas logger
                return {symbol: None for symbol in symbols}
            
            self.logger.warning(f"‚ö†Ô∏è Erreur calcul volatilit√©: {e}")
            return {symbol: None for symbol in symbols}

    def _retry_failed_symbols(
        self, failed_symbols: List[str], timestamp: float
    ):
        """
        Effectue un retry pour les symboles en √©chec.

        Args:
            failed_symbols: Liste des symboles √† retry
            timestamp: Timestamp pour le cache
        """
        # CORRECTIF : Ne pas faire de retry si on est en train de s'arr√™ter
        if not self._running:
            return
        
        # Logger avec protection contre l'arr√™t
        try:
            self.logger.info(
                f"üîÅ Retry volatilit√© pour {len(failed_symbols)} symboles‚Ä¶"
            )
        except (ValueError, RuntimeError):
            # Logging d√©sactiv√© ou arr√™t en cours, abandonner le retry
            return
        
        # Attendre avec v√©rification d'interruption
        for _ in range(50):  # 5 secondes = 50 * 0.1s
            if not self._running:
                return
            from config.timeouts import TimeoutConfig
            time.sleep(TimeoutConfig.SHORT_SLEEP)

        # V√©rifier encore une fois avant le retry
        if not self._running:
            return

        # Retry du calcul
        retry_results = self._run_async_volatility_batch(failed_symbols)

        # Mettre √† jour le cache avec les r√©sultats du retry
        retry_ok = 0
        for symbol, vol_pct in retry_results.items():
            if vol_pct is not None:
                self.cache.set_cached_volatility(symbol, vol_pct)
                retry_ok += 1

        # CORRECTIF : Ne logger que si on tourne encore ET que le logging fonctionne
        if self._running:
            try:
                self.logger.info(
                    f"üîÅ Retry volatilit√© termin√©: r√©cup√©r√©s={retry_ok}/{len(failed_symbols)}"
                )
            except (ValueError, RuntimeError):
                # Logging d√©sactiv√© ou arr√™t en cours, ignorer
                pass

    def _wait_for_next_cycle(self, interval: int):
        """
        Attend l'intervalle sp√©cifi√© avec v√©rification d'interruption.

        Args:
            interval: Intervalle en secondes
        """
        # V√©rification tr√®s fr√©quente pour un arr√™t plus r√©actif
        for _ in range(
            interval * 10
        ):  # V√©rifier 10 fois par seconde (plus efficace)
            if not self._running:
                break
            from config.timeouts import TimeoutConfig
            time.sleep(TimeoutConfig.SHORT_SLEEP)  # Attendre 100ms entre chaque v√©rification

    def is_running(self) -> bool:
        """
        V√©rifie si le planificateur est en cours d'ex√©cution.

        Returns:
            True si le rafra√Æchissement est actif
        """
        return (
            self._running
            and self._refresh_thread
            and self._refresh_thread.is_alive()
        )
