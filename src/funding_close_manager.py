#!/usr/bin/env python3
"""
Gestionnaire de fermeture automatique apr√®s funding.

Cette classe g√®re la fermeture automatique des positions apr√®s avoir touch√© le funding.
Elle surveille les √©v√©nements de funding via WebSocket priv√© et ferme automatiquement
les positions correspondantes.

Fonctionnalit√©s :
- Surveillance des √©v√©nements de funding en temps r√©el
- Fermeture automatique des positions apr√®s funding
- Gestion des erreurs et retry
- Logs informatifs pour le suivi
"""

import asyncio
import threading
import time
from typing import Callable, Dict, Any, Optional, Set
from logging_setup import setup_logging
from ws_private import PrivateWSClient
from config import get_settings


class FundingCloseManager:
    """
    Gestionnaire de fermeture automatique apr√®s funding.
    
    Cette classe surveille les √©v√©nements de funding via WebSocket priv√©
    et ferme automatiquement les positions correspondantes.
    """
    
    def __init__(
        self,
        testnet: bool,
        logger,
        bybit_client,
        on_position_closed: Optional[Callable[[str, Dict[str, Any]], None]] = None,
    ):
        """
        Initialise le gestionnaire de fermeture apr√®s funding.
        
        Args:
            testnet: Mode testnet ou mainnet
            logger: Logger pour les messages
            bybit_client: Client Bybit pour fermer les positions
            on_position_closed: Callback appel√© lors de la fermeture d'une position
        """
        self.testnet = testnet
        self.logger = logger
        self.bybit_client = bybit_client
        self.on_position_closed = on_position_closed
        
        # Positions surveill√©es pour fermeture apr√®s funding
        self._monitored_positions: Set[str] = set()
        
        # WebSocket client pour surveiller les √©v√©nements de funding
        self._ws_client: Optional[PrivateWSClient] = None
        self._monitor_thread: Optional[threading.Thread] = None
        self._running = False
        self._last_funding_check = {}  # Cache des derniers funding rates
        
        # Configuration
        settings = get_settings()
        self.api_key = settings["api_key"]
        self.api_secret = settings["api_secret"]
        
        self.logger.info("üí∞ FundingCloseManager initialis√©")

    def add_position_to_monitor(self, symbol: str):
        """
        Ajoute une position √† surveiller pour fermeture apr√®s funding.
        
        Args:
            symbol: Symbole de la position √† surveiller
        """
        self._monitored_positions.add(symbol)
        self.logger.info(f"üí∞ Position ajout√©e √† la surveillance funding: {symbol}")

    def remove_position_from_monitor(self, symbol: str):
        """
        Retire une position de la surveillance.
        
        Args:
            symbol: Symbole de la position √† ne plus surveiller
        """
        if symbol in self._monitored_positions:
            self._monitored_positions.remove(symbol)
            self.logger.info(f"üí∞ Position retir√©e de la surveillance funding: {symbol}")

    def _on_funding_event(self, topic: str, data: Dict[str, Any]):
        """
        Callback pour les √©v√©nements de funding.
        
        Args:
            topic: Topic de l'√©v√©nement
            data: Donn√©es de l'√©v√©nement
        """
        # Log de d√©bogage pour TOUS les √©v√©nements WebSocket
        self.logger.info(f"üîç [DEBUG] √âv√©nement WebSocket re√ßu: topic='{topic}', type={type(data)}, data={data}")
        
        # V√©rifier le type de topic re√ßu
        if topic == "funding":
            self.logger.info(f"üí∞ [DEBUG] Topic 'funding' d√©tect√© !")
            if "data" in data:
                self.logger.info(f"üí∞ [DEBUG] Donn√©es funding trouv√©es: {data['data']}")
                for funding_info in data["data"]:
                    symbol = funding_info.get("symbol")
                    funding_rate = float(funding_info.get("fundingRate", 0))
                    
                    if not symbol:
                        self.logger.warning(f"‚ö†Ô∏è [DEBUG] Symbole manquant dans funding_info: {funding_info}")
                        continue
                    
                    self.logger.info(f"üí∞ [DEBUG] Funding d√©tect√© pour {symbol}: rate={funding_rate:.4f}")
                    
                    # V√©rifier si cette position est surveill√©e
                    if symbol in self._monitored_positions:
                        self.logger.info(f"üéØ [DEBUG] Position {symbol} est surveill√©e ! Fermeture automatique...")
                        self.logger.info(f"üí∞ Funding touch√© pour {symbol}: {funding_rate:.4f}")
                        
                        # Fermer automatiquement la position
                        self._close_position_after_funding(symbol)
                    else:
                        self.logger.info(f"‚ÑπÔ∏è [DEBUG] Position {symbol} non surveill√©e (surveill√©es: {list(self._monitored_positions)})")
            else:
                self.logger.warning(f"‚ö†Ô∏è [DEBUG] Pas de 'data' dans l'√©v√©nement funding: {data}")
        else:
            self.logger.info(f"‚ÑπÔ∏è [DEBUG] Topic '{topic}' ignor√© (attendu: 'funding')")

    def _close_position_after_funding(self, symbol: str):
        """
        Ferme automatiquement une position apr√®s avoir touch√© le funding.
        
        Args:
            symbol: Symbole de la position √† fermer
        """
        try:
            self.logger.info(f"üîÑ Fermeture automatique de la position {symbol} apr√®s funding...")
            
            # R√©cup√©rer les informations des positions (filtrer ensuite par symbole)
            positions = self.bybit_client.get_positions(category="linear", settleCoin="USDT")

            if not positions or not positions.get("list"):
                self.logger.warning(f"‚ö†Ô∏è Aucune position trouv√©e pour {symbol}")
                return
            
            # Filtrer la liste pour ne conserver que le symbole cibl√©
            all_positions = positions.get("list", [])
            matching = [p for p in all_positions if p.get("symbol") == symbol]
            if not matching:
                self.logger.warning(f"‚ö†Ô∏è Aucune position ouverte pour {symbol}")
                return

            position_data = matching[0]
            side = position_data.get("side")
            size = position_data.get("size")
            
            if not side or not size or float(size) == 0:
                self.logger.warning(f"‚ö†Ô∏è Position {symbol} d√©j√† ferm√©e ou invalide")
                return
            
            # D√©terminer le c√¥t√© oppos√© pour fermer
            close_side = "Sell" if side == "Buy" else "Buy"
            
            # Fermer la position (ordre market pour fermeture imm√©diate)
            close_response = self.bybit_client.place_order(
                symbol=symbol,
                side=close_side,
                order_type="Market",
                qty=size,
                category="linear"
            )
            
            if close_response and close_response.get("orderId"):
                self.logger.info(f"‚úÖ Position {symbol} ferm√©e automatiquement apr√®s funding - OrderID: {close_response['orderId']}")
                
                # Appeler le callback de fermeture de position
                if self.on_position_closed:
                    try:
                        position_info = {
                            "symbol": symbol,
                            "side": close_side,
                            "size": size,
                            "reason": "funding_close"
                        }
                        self.on_position_closed(symbol, position_info)
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è Erreur callback fermeture position: {e}")
                
                # Retirer de la surveillance
                self.remove_position_from_monitor(symbol)
                
            else:
                self.logger.error(f"‚ùå √âchec fermeture position {symbol}: {close_response}")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur fermeture automatique {symbol}: {e}")

    def _run_ws_client(self):
        """Lance le client WebSocket priv√© pour surveiller les √©v√©nements de funding."""
        try:
            self._ws_client = PrivateWSClient(
                testnet=self.testnet,
                api_key=self.api_key,
                api_secret=self.api_secret,
                channels=["funding"],  # Surveiller les √©v√©nements de funding
                logger=self.logger,
            )
            self._ws_client.on_topic = self._on_funding_event
            self._ws_client.run()
        except Exception as e:
            self.logger.error(f"‚ùå Erreur FundingCloseManager WebSocket: {e}")
        finally:
            self.logger.info("üõë FundingCloseManager WebSocket arr√™t√©.")
    
    def _check_positions_periodically(self):
        """V√©rifie p√©riodiquement les positions et les ferme si n√©cessaire (fallback)."""
        import threading
        import time
        
        def check_loop():
            while self._running:
                try:
                    if self._monitored_positions:
                        self.logger.info(f"üîç V√©rification p√©riodique des positions: {list(self._monitored_positions)}")
                        
                        for symbol in list(self._monitored_positions):
                            # V√©rifier si la position existe encore (filtrage local par symbole)
                            # Faire plusieurs tentatives avec d√©lai pour g√©rer les latences API
                            position_found = False
                            max_attempts = 3
                            
                            for attempt in range(max_attempts):
                                try:
                                    positions = self.bybit_client.get_positions(category="linear", settleCoin="USDT")
                                    
                                    # Debug: Afficher la r√©ponse de l'API
                                    self.logger.info(f"üîç Tentative {attempt + 1}/{max_attempts} - API Response pour {symbol}: {positions}")

                                    if positions and positions.get("list"):
                                        all_positions = positions.get("list", [])
                                        self.logger.info(f"üîç Toutes les positions: {[p.get('symbol') for p in all_positions]}")
                                        
                                        matching = [p for p in all_positions if p.get("symbol") == symbol]
                                        if matching:
                                            position_data = matching[0]
                                            size = position_data.get("size", "0")
                                            
                                            self.logger.info(f"üîç Position {symbol}: size={size}")
                                            
                                            if size and float(size) > 0:
                                                self.logger.info(f"‚úÖ Position {symbol} confirm√©e (size={size}) - surveillance continue")
                                                position_found = True
                                                break
                                            else:
                                                self.logger.info(f"‚ÑπÔ∏è Position {symbol} ferm√©e (size=0) - retirer de la surveillance")
                                                self.remove_position_from_monitor(symbol)
                                                position_found = True
                                                break
                                    
                                    # Si pas trouv√©e, attendre un peu avant la prochaine tentative
                                    if attempt < max_attempts - 1:
                                        self.logger.debug(f"‚è≥ Position {symbol} non trouv√©e, tentative {attempt + 2} dans 5s...")
                                        time.sleep(5)
                                        
                                except Exception as e:
                                    self.logger.error(f"‚ùå Erreur tentative {attempt + 1} pour {symbol}: {e}")
                                    if attempt < max_attempts - 1:
                                        time.sleep(5)
                            
                            # Si la position n'a pas √©t√© trouv√©e apr√®s toutes les tentatives
                            if not position_found:
                                self.logger.warning(f"‚ö†Ô∏è Position {symbol} non trouv√©e apr√®s {max_attempts} tentatives")
                                self.logger.info(f"‚ÑπÔ∏è Position {symbol} n'existe plus - retirer de la surveillance")
                                self.remove_position_from_monitor(symbol)
                            else:
                                # V√©rifier si le funding a √©t√© touch√© via API REST
                                self._check_funding_event(symbol)
                                self.logger.info(f"‚ÑπÔ∏è Position {symbol} toujours active - surveillance continue")
                    
                    # Attendre 30 secondes avant la prochaine v√©rification
                    time.sleep(30)
                    
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur v√©rification p√©riodique: {e}")
                    time.sleep(30)
        
        # D√©marrer le thread de v√©rification p√©riodique
        check_thread = threading.Thread(target=check_loop, daemon=True)
        check_thread.start()

    def _check_funding_event(self, symbol: str):
        """
        V√©rifie si un √©v√©nement de funding a eu lieu pour le symbole donn√©.
        Utilise l'API REST pour r√©cup√©rer les donn√©es de funding.
        
        Args:
            symbol: Symbole √† v√©rifier
        """
        try:
            # R√©cup√©rer les donn√©es de funding via API REST
            funding_data = self.bybit_client.get_funding_rate(symbol=symbol)
            
            if funding_data and funding_data.get("list"):
                latest_funding = funding_data["list"][0]  # Le plus r√©cent
                funding_rate = float(latest_funding.get("fundingRate", 0))
                funding_time = latest_funding.get("fundingRateTimestamp", "")
                
                self.logger.info(f"üîç [DEBUG] Funding {symbol}: rate={funding_rate:.4f}, time={funding_time}")
                
                # V√©rifier si c'est un nouveau funding (pas d√©j√† trait√©)
                cache_key = f"{symbol}_{funding_time}"
                if cache_key not in self._last_funding_check:
                    # V√©rifier si le funding est r√©cent (dans les 5 derni√®res minutes)
                    import time
                    current_time = int(time.time() * 1000)  # Timestamp en millisecondes
                    funding_timestamp = int(funding_time) if funding_time else 0
                    time_diff_minutes = (current_time - funding_timestamp) / (1000 * 60)
                    
                    self.logger.info(f"üîç [DEBUG] Diff√©rence de temps: {time_diff_minutes:.1f} minutes")
                    
                    # Ne fermer que si le funding est tr√®s r√©cent (moins de 5 minutes)
                    if time_diff_minutes < 5:
                        self._last_funding_check[cache_key] = True
                        
                        self.logger.info(f"üí∞ [DEBUG] Nouveau funding r√©cent d√©tect√© pour {symbol}: {funding_rate:.4f}")
                        self.logger.info(f"üéØ [DEBUG] Position {symbol} est surveill√©e ! Fermeture automatique...")
                        
                        # Fermer automatiquement la position
                        self._close_position_after_funding(symbol)
                    else:
                        self.logger.info(f"‚ÑπÔ∏è [DEBUG] Funding {symbol} trop ancien ({time_diff_minutes:.1f}min) - pas de fermeture")
                else:
                    self.logger.debug(f"‚ÑπÔ∏è [DEBUG] Funding {symbol} d√©j√† trait√©: {funding_rate:.4f}")
            else:
                self.logger.warning(f"‚ö†Ô∏è [DEBUG] Aucune donn√©e de funding pour {symbol}")
                
        except Exception as e:
            self.logger.error(f"‚ùå [DEBUG] Erreur v√©rification funding {symbol}: {e}")

    def start(self):
        """D√©marre le gestionnaire de fermeture apr√®s funding."""
        if not self._running:
            self._running = True
            self._monitor_thread = threading.Thread(target=self._run_ws_client, daemon=True)
            self._monitor_thread.start()
            
            # D√©marrer aussi la v√©rification p√©riodique comme fallback
            self._check_positions_periodically()
            
            self.logger.info("üí∞ FundingCloseManager d√©marr√©")

    def stop(self):
        """Arr√™te le gestionnaire de fermeture apr√®s funding."""
        if self._running:
            self._running = False
            if self._ws_client:
                self._ws_client.close()
            if self._monitor_thread and self._monitor_thread.is_alive():
                self._monitor_thread.join(timeout=5)
            self.logger.info("üõë FundingCloseManager arr√™t√©")

    def get_monitored_positions(self) -> Set[str]:
        """Retourne les positions actuellement surveill√©es."""
        return self._monitored_positions.copy()
    
    def force_close_position(self, symbol: str):
        """
        Force la fermeture d'une position sp√©cifique.
        
        Args:
            symbol: Symbole de la position √† fermer
        """
        try:
            self.logger.info(f"üîÑ Fermeture forc√©e de la position {symbol}...")
            self._close_position_after_funding(symbol)
        except Exception as e:
            self.logger.error(f"‚ùå Erreur fermeture forc√©e {symbol}: {e}")
    
    def force_close_all_positions(self):
        """Force la fermeture de toutes les positions surveill√©es."""
        try:
            monitored = list(self._monitored_positions)
            self.logger.info(f"üîÑ Fermeture forc√©e de toutes les positions: {monitored}")
            
            for symbol in monitored:
                self.force_close_position(symbol)
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur fermeture forc√©e toutes positions: {e}")
