#!/usr/bin/env python3
"""
Initialiseur du bot Bybit - Version refactoris√©e.

üéØ RESPONSABILIT√â : Cr√©er tous les managers du bot

Cette classe est appel√©e UNE SEULE FOIS au d√©marrage par BotOrchestrator
pour cr√©er et configurer tous les managers n√©cessaires.

üìù CE QUE FAIT CE FICHIER :
1. initialize_managers() : Cr√©e les 8 managers principaux
   - data_manager : Gestion des donn√©es de march√©
   - display_manager : Affichage des tableaux
   - monitoring_manager : Surveillance globale
   - ws_manager : Connexions WebSocket
   - volatility_tracker : Calcul de volatilit√©
   - watchlist_manager : Construction de la watchlist
   - callback_manager : Gestion des callbacks
   - opportunity_manager : D√©tection d'opportunit√©s

2. setup_manager_callbacks() : Configure les liens entre managers
   - Connecte le monitoring_manager au callback_manager
   - Connecte l'opportunity_manager aux nouveaux symboles d√©tect√©s

3. get_managers() : Retourne un dict avec tous les managers cr√©√©s

üîó APPEL√â PAR : bot.py (BotOrchestrator.__init__, ligne 76)

üìö POUR EN SAVOIR PLUS : Consultez GUIDE_DEMARRAGE_BOT.md
"""

from typing import Optional
from logging_setup import setup_logging
from config_unified import UnifiedConfigManager
from unified_data_manager import UnifiedDataManager
from display_manager import DisplayManager
from unified_monitoring_manager import UnifiedMonitoringManager
from ws_manager import WebSocketManager
from volatility_tracker import VolatilityTracker
from watchlist_manager import WatchlistManager
from callback_manager import CallbackManager
from opportunity_manager import OpportunityManager


class BotInitializer:
    """
    Initialiseur du bot Bybit.

    Responsabilit√©s :
    - Initialisation des managers principaux
    - Configuration des gestionnaires sp√©cialis√©s
    - Configuration des callbacks entre managers
    """

    def __init__(self, testnet: bool, logger=None):
        """
        Initialise l'initialiseur du bot.

        Args:
            testnet: Utiliser le testnet (True) ou le march√© r√©el (False)
            logger: Logger pour les messages (optionnel)
        """
        self.testnet = testnet
        self.logger = logger or setup_logging()

        # Gestionnaire de configuration
        self.config_manager: Optional[UnifiedConfigManager] = None

        # Managers principaux
        self.data_manager: Optional[UnifiedDataManager] = None
        self.display_manager: Optional[DisplayManager] = None
        self.monitoring_manager: Optional[UnifiedMonitoringManager] = None
        self.ws_manager: Optional[WebSocketManager] = None
        self.volatility_tracker: Optional[VolatilityTracker] = None
        self.watchlist_manager: Optional[WatchlistManager] = None

        # Gestionnaires sp√©cialis√©s
        self.callback_manager: Optional[CallbackManager] = None
        self.opportunity_manager: Optional[OpportunityManager] = None

    def initialize_managers(self):
        """
        Initialise les managers principaux.

        Cette m√©thode cr√©e et configure tous les managers principaux
        n√©cessaires au fonctionnement du bot.
        """
        # Initialiser le gestionnaire de configuration (partag√© entre les managers)
        self.config_manager = UnifiedConfigManager()

        # Initialiser le gestionnaire de donn√©es
        self.data_manager = UnifiedDataManager(
            testnet=self.testnet, logger=self.logger
        )

        # Initialiser le gestionnaire d'affichage
        self.display_manager = DisplayManager(
            self.data_manager, logger=self.logger
        )

        # Initialiser le gestionnaire de surveillance unifi√©
        self.monitoring_manager = UnifiedMonitoringManager(
            self.data_manager, testnet=self.testnet, logger=self.logger
        )

        # Gestionnaire WebSocket d√©di√© (avec injection du data_manager)
        self.ws_manager = WebSocketManager(
            testnet=self.testnet, data_manager=self.data_manager, logger=self.logger
        )

        # Gestionnaire de volatilit√© d√©di√©
        self.volatility_tracker = VolatilityTracker(
            testnet=self.testnet, logger=self.logger
        )

        # Gestionnaire de watchlist d√©di√© (avec injection du config_manager)
        self.watchlist_manager = WatchlistManager(
            testnet=self.testnet,
            config_manager=self.config_manager,
            logger=self.logger,
        )

    def initialize_specialized_managers(self):
        """
        Initialise les gestionnaires sp√©cialis√©s.

        Cette m√©thode cr√©e les gestionnaires sp√©cialis√©s pour
        les callbacks et les opportunit√©s.
        """
        # Gestionnaire de callbacks
        self.callback_manager = CallbackManager(logger=self.logger)

        # Gestionnaire d'opportunit√©s
        self.opportunity_manager = OpportunityManager(
            self.data_manager, logger=self.logger
        )

    def setup_manager_callbacks(self):
        """
        Configure les callbacks entre les diff√©rents managers.

        Cette m√©thode d√©l√®gue enti√®rement √† CallbackManager pour centraliser
        toute la logique de configuration des callbacks.
        """
        if not all(
            [
                self.callback_manager,
                self.display_manager,
                self.monitoring_manager,
                self.volatility_tracker,
                self.ws_manager,
                self.data_manager,
            ]
        ):
            raise RuntimeError(
                "Tous les managers doivent √™tre initialis√©s avant "
                "la configuration des callbacks"
            )

        # D√©l√©gation compl√®te √† CallbackManager pour centraliser la logique
        self.callback_manager.setup_all_callbacks(
            self.display_manager,
            self.monitoring_manager,
            self.volatility_tracker,
            self.ws_manager,
            self.data_manager,
            self.watchlist_manager,
            self.opportunity_manager,
        )

    def get_managers(self):
        """
        Retourne tous les managers initialis√©s.

        Returns:
            dict: Dictionnaire contenant tous les managers
        """
        return {
            "config_manager": self.config_manager,
            "data_manager": self.data_manager,
            "display_manager": self.display_manager,
            "monitoring_manager": self.monitoring_manager,
            "ws_manager": self.ws_manager,
            "volatility_tracker": self.volatility_tracker,
            "watchlist_manager": self.watchlist_manager,
            "callback_manager": self.callback_manager,
            "opportunity_manager": self.opportunity_manager,
        }
