#!/usr/bin/env python3
"""
Client WebSocket publique Bybit v5 avec reconnexion automatique.

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üìñ GUIDE DE LECTURE                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Ce fichier impl√©mente un client WebSocket publique pour l'API Bybit v5 avec :
- Connexion automatique aux endpoints publics (tickers, orderbook, trades)
- Souscription automatique aux symboles
- Reconnexion avec backoff progressif
- Gestion des erreurs et timeouts
- Callbacks personnalisables

üîç COMPRENDRE CE FICHIER EN 5 MINUTES :

1. Connexion et souscription (lignes 71-98)
   ‚îî‚îÄ> Ouverture de la connexion et souscription aux tickers

2. Gestion des messages (lignes 146-203)
   ‚îî‚îÄ> Parsing et dispatch des messages re√ßus

3. Reconnexion automatique (lignes 239-279)
   ‚îî‚îÄ> Backoff progressif en cas d'erreur

4. Callbacks personnalisables (lignes 51-54)
   ‚îî‚îÄ> Hooks pour √©v√©nements (ouverture, fermeture, erreur)

üì° ENDPOINTS WEBSOCKET PUBLICS BYBIT V5 :

Format des URLs :
- Testnet linear: wss://stream-testnet.bybit.com/v5/public/linear
- Mainnet linear: wss://stream.bybit.com/v5/public/linear
- Testnet inverse: wss://stream-testnet.bybit.com/v5/public/inverse
- Mainnet inverse: wss://stream.bybit.com/v5/public/inverse

Topics disponibles :
- "tickers.{symbol}" : Prix en temps r√©el (lastPrice, bid1, ask1, volume24h)
- "orderbook.{depth}.{symbol}" : Carnet d'ordres (depth: 1, 50, 200, 500)
- "publicTrade.{symbol}" : Trades publics en temps r√©el
- "kline.{interval}.{symbol}" : Bougies (interval: 1, 3, 5, 15, 30, 60, etc.)

üîÑ M√âCANISME DE RECONNEXION AVEC BACKOFF PROGRESSIF :

Le backoff progressif √©vite de surcharger le serveur en cas d'erreur.
Les d√©lais augmentent √† chaque tentative √©chou√©e :

- Tentative 1 : D√©lai = 1 seconde
- Tentative 2 : D√©lai = 2 secondes
- Tentative 3 : D√©lai = 5 secondes
- Tentative 4 : D√©lai = 10 secondes
- Tentative 5+ : D√©lai = 30 secondes (max)

Le d√©lai est r√©initialis√© √† 0 apr√®s une connexion r√©ussie.

Pourquoi le backoff progressif ?
- ‚úÖ √âvite de spammer le serveur avec des reconnexions rapides
- ‚úÖ Laisse le temps au serveur de se r√©tablir
- ‚úÖ R√©duit la charge r√©seau
- ‚úÖ Augmente les chances de succ√®s

üìö EXEMPLE D'UTILISATION :

```python
from ws_public import PublicWSClient

# Cr√©er le client
def on_ticker(data):
    symbol = data.get("symbol")
    price = data.get("lastPrice")
    print(f"{symbol}: ${price}")

client = PublicWSClient(
    category="linear",
    symbols=["BTCUSDT", "ETHUSDT"],
    testnet=True,
    logger=my_logger,
    on_ticker_callback=on_ticker
)

# D√©marrer (bloquant)
client.run()
```

üìä FORMAT DES MESSAGES RE√áUS :

Message ticker :
```json
{
    "topic": "tickers.BTCUSDT",
    "type": "snapshot",
    "data": {
        "symbol": "BTCUSDT",
        "lastPrice": "43500.50",
        "bid1Price": "43500.00",
        "ask1Price": "43501.00",
        "volume24h": "12345.67",
        "turnover24h": "537000000"
    },
    "ts": 1712345678000
}
```

Message subscription confirmation :
```json
{
    "success": true,
    "ret_msg": "subscribe",
    "conn_id": "...",
    "op": "subscribe"
}
```

üìñ R√âF√âRENCES :
- Documentation WebSocket Bybit v5: https://bybit-exchange.github.io/docs/v5/ws/connect
- Topics publics: https://bybit-exchange.github.io/docs/v5/ws/public/ticker
"""

import json
import time
import websocket
from typing import Callable, List, Optional
from metrics import record_ws_connection, record_ws_error


class PublicWSClient:
    """
    Client WebSocket publique Bybit v5 avec reconnexion automatique.
    
    Ce client g√®re automatiquement :
    - Connexion au serveur WebSocket Bybit
    - Souscription aux topics publics (tickers, orderbook, trades, klines)
    - Reconnexion automatique avec backoff progressif
    - Parsing et dispatch des messages re√ßus
    - Gestion des erreurs et timeouts
    
    Attributes:
        category (str): Cat√©gorie des symboles ("linear" ou "inverse")
        symbols (List[str]): Liste des symboles √† suivre
        testnet (bool): Utiliser le testnet (True) ou mainnet (False)
        logger: Instance du logger pour tracer les √©v√©nements
        on_ticker_callback (Callable): Fonction appel√©e pour chaque ticker re√ßu
        ws (WebSocketApp): Instance WebSocket sous-jacente
        running (bool): √âtat de la connexion
        reconnect_delays (List[int]): D√©lais de reconnexion progressifs [1, 2, 5, 10, 30]
        current_delay_index (int): Index du d√©lai actuel (r√©initialis√© apr√®s succ√®s)
        
    Example:
        ```python
        # Exemple simple : suivre 2 symboles
        def on_ticker(data):
            print(f"{data['symbol']}: ${data['lastPrice']}")
        
        client = PublicWSClient(
            category="linear",
            symbols=["BTCUSDT", "ETHUSDT"],
            testnet=True,
            logger=my_logger,
            on_ticker_callback=on_ticker
        )
        
        # D√©marrer (bloquant)
        client.run()
        ```
        
    Note:
        - La m√©thode run() est bloquante (utiliser un thread si n√©cessaire)
        - Le backoff progressif √©vite de spammer le serveur
        - Les callbacks sont appel√©s dans le thread WebSocket
    """

    def __init__(
        self,
        category: str,
        symbols: List[str],
        testnet: bool,
        logger,
        on_ticker_callback: Callable[[dict], None],
    ):
        """
        Initialise le client WebSocket publique.
        
        Args:
            category (str): Cat√©gorie des symboles
                          - "linear" : Contrats USDT perpetual (BTCUSDT, ETHUSDT, etc.)
                          - "inverse" : Contrats inverse (BTCUSD, ETHUSD, etc.)
            symbols (List[str]): Liste des symboles √† suivre en temps r√©el
                               Exemples: ["BTCUSDT", "ETHUSDT", "SOLUSDT"]
                               Max recommand√©: ~100 symboles par connexion
            testnet (bool): Environnement √† utiliser
                          - True : Testnet (api-testnet.bybit.com)
                          - False : Mainnet (api.bybit.com)
            logger: Instance du logger pour tracer les √©v√©nements
                   Recommand√©: logging.getLogger(__name__)
            on_ticker_callback (Callable[[dict], None]): Fonction appel√©e pour chaque ticker
                                                        Signature: callback(ticker_data: dict) -> None
                                                        
        Note:
            - Les symboles invalides seront ignor√©s par Bybit
            - Le callback doit √™tre rapide (non-bloquant)
            - Pour des traitements lourds, utiliser une queue
        """
        self.category = category
        self.symbols = symbols
        self.testnet = testnet
        self.logger = logger
        self.on_ticker_callback = on_ticker_callback
        self.ws: Optional[websocket.WebSocketApp] = None
        self.running = False

        # Configuration de reconnexion avec backoff progressif
        # Les d√©lais augmentent √† chaque √©chec pour √©viter de spammer le serveur
        # [1, 2, 5, 10, 30] signifie : 1s, puis 2s, puis 5s, puis 10s, puis 30s (max)
        # Le current_delay_index est r√©initialis√© √† 0 apr√®s une connexion r√©ussie
        self.reconnect_delays = [1, 2, 5, 10, 30]  # secondes
        self.current_delay_index = 0  # Commence au premier d√©lai (1s)

        # Callbacks optionnels pour √©v√©nements de connexion
        self.on_open_callback: Optional[Callable] = None
        self.on_close_callback: Optional[Callable] = None
        self.on_error_callback: Optional[Callable] = None

    def _build_url(self) -> str:
        """Construit l'URL WebSocket selon la cat√©gorie et l'environnement."""
        from config.urls import URLConfig
        return URLConfig.get_websocket_url(self.category, self.testnet)

    def _on_open(self, ws):
        """
        Callback appel√© automatiquement √† l'ouverture de la connexion WebSocket.
        
        Cette m√©thode :
        1. Enregistre la connexion dans les m√©triques
        2. R√©initialise le backoff progressif (connexion r√©ussie)
        3. Souscrit automatiquement aux topics tickers pour tous les symboles
        4. Appelle le callback personnalis√© si d√©fini
        
        Args:
            ws: Instance WebSocketApp (fournie automatiquement par websocket-client)
        """
        # Enregistrer la connexion r√©ussie dans les m√©triques
        record_ws_connection(connected=True)

        # ‚úÖ SUCC√àS : R√©initialiser le backoff progressif
        # Apr√®s une connexion r√©ussie, on recommence avec le d√©lai le plus court (1s)
        # Cela permet de r√©agir rapidement en cas de nouvelle d√©connexion
        self.current_delay_index = 0

        # S'abonner aux tickers pour tous les symboles
        if self.symbols:
            subscribe_message = {
                "op": "subscribe",
                "args": [f"tickers.{symbol}" for symbol in self.symbols],
            }
            try:
                ws.send(json.dumps(subscribe_message))
                self.logger.info(
                    f"# Souscription tickers ‚Üí {len(self.symbols)} symboles "
                    f"({self.category})"
                )
            except (json.JSONEncodeError, ConnectionError, OSError) as e:
                self.logger.error(
                    f"Erreur souscription WebSocket {self.category}: "
                    f"{type(e).__name__}: {e}"
                )
            except Exception as e:
                self.logger.warning(
                    f"‚ö†Ô∏è Erreur souscription {self.category}: {e}"
                )
        else:
            self.logger.warning(
                f"‚ö†Ô∏è Aucun symbole √† suivre pour {self.category}"
            )

        # Appeler le callback externe si d√©fini
        if self.on_open_callback:
            try:
                self.on_open_callback()
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è Erreur callback on_open: {e}")

    def _on_message(self, ws, message):
        """Callback interne appel√© √† chaque message re√ßu."""
        try:
            data = json.loads(message)
            if data.get("topic", "").startswith("tickers."):
                ticker_data = data.get("data", {})
                if ticker_data:
                    self.on_ticker_callback(ticker_data)
        except json.JSONDecodeError as e:
            self.logger.warning(f"‚ö†Ô∏è Erreur JSON ({self.category}): {e}")
        except (KeyError, TypeError, AttributeError) as e:
            self.logger.warning(
                f"‚ö†Ô∏è Erreur parsing donn√©es ({self.category}): "
                f"{type(e).__name__}: {e}"
            )
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Erreur parsing ({self.category}): {e}")

    def _on_error(self, ws, error):
        """Callback interne appel√© en cas d'erreur."""
        if self.running:
            self.logger.warning(f"‚ö†Ô∏è WS erreur ({self.category}) : {error}")
            record_ws_error()

            # Appeler le callback externe si d√©fini
            if self.on_error_callback:
                try:
                    self.on_error_callback(error)
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è Erreur callback on_error: {e}")

    def _on_close(self, ws, close_status_code, close_msg):
        """Callback interne appel√© √† la fermeture."""
        if self.running:
            self.logger.info(
                f"üîå WS ferm√©e ({self.category}) "
                f"(code={close_status_code}, reason={close_msg})"
            )

            # Appeler le callback externe si d√©fini
            if self.on_close_callback:
                try:
                    self.on_close_callback(close_status_code, close_msg)
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è Erreur callback on_close: {e}")

    def run(self):
        """
        Boucle principale avec reconnexion automatique et backoff progressif.

        Cette m√©thode bloque jusqu'√† ce que close() soit appel√©.
        
        CORRECTIF : Entoure tout d'un try/finally pour garantir le nettoyage
        des callbacks m√™me en cas d'exception.
        """
        self.running = True

        try:
            while self.running:
                try:
                    # Connexion √† la WebSocket publique

                    url = self._build_url()
                    self.ws = websocket.WebSocketApp(
                        url,
                        on_open=self._on_open,
                        on_message=self._on_message,
                        on_error=self._on_error,
                        on_close=self._on_close,
                    )

                    self.ws.run_forever(
                        ping_interval=20, ping_timeout=15
                    )  # Timeout ping augment√© de 10s √† 15s

                except (ConnectionError, OSError, TimeoutError) as e:
                    if self.running:
                        try:
                            self.logger.error(
                                f"Erreur connexion r√©seau WS publique "
                                f"({self.category}): "
                                f"{type(e).__name__}: {e}"
                            )
                        except Exception:
                            pass
                except Exception as e:
                    if self.running:
                        try:
                            self.logger.error(
                                f"Erreur connexion WS publique "
                                f"({self.category}): {e}"
                            )
                        except Exception:
                            pass

                # ‚ùå √âCHEC DE CONNEXION : Appliquer le backoff progressif
                if self.running:
                    # Obtenir le d√©lai de reconnexion actuel
                    # min() garantit qu'on ne d√©passe pas le dernier d√©lai (30s)
                    delay = self.reconnect_delays[
                        min(
                            self.current_delay_index,
                            len(self.reconnect_delays) - 1,
                        )
                    ]
                    try:
                        self.logger.warning(
                            f"üîÅ WS publique ({self.category}) d√©connect√©e "
                            f"‚Üí reconnexion dans {delay}s (tentative #{self.current_delay_index + 1})"
                        )
                        # Enregistrer la d√©connexion dans les m√©triques
                        record_ws_connection(connected=False)
                    except Exception:
                        pass

                    # Attendre le d√©lai avec v√©rification p√©riodique de l'arr√™t
                    # On ne peut pas utiliser time.sleep(delay) directement car √ßa bloquerait
                    # l'arr√™t propre du bot. Au lieu de √ßa, on v√©rifie toutes les 100ms.
                    # Exemple : delay=5s ‚Üí 50 v√©rifications de 100ms chacune
                    for _ in range(delay * 10):  # 10 v√©rifications par seconde
                        if not self.running:  # Arr√™t demand√© ?
                            break
                        from config.timeouts import TimeoutConfig
                        time.sleep(TimeoutConfig.SHORT_SLEEP)  # Attendre 100ms

                    # üìà BACKOFF PROGRESSIF : Augmenter le d√©lai pour la prochaine fois
                    # Chaque √©chec augmente l'index jusqu'√† atteindre le max (30s)
                    # Exemple : index 0 ‚Üí 1s, index 1 ‚Üí 2s, index 2 ‚Üí 5s, etc.
                    if self.current_delay_index < len(self.reconnect_delays) - 1:
                        self.current_delay_index += 1
                else:
                    break
        finally:
            # CORRECTIF : Garantir le nettoyage m√™me en cas d'exception
            self._cleanup()

    def _cleanup(self):
        """
        Nettoie toutes les ressources (WebSocket et callbacks).
        
        CORRECTIF : M√©thode centralis√©e pour garantir le nettoyage
        m√™me en cas d'exception dans run().
        """
        # Fermer la WebSocket si elle existe
        if self.ws:
            try:
                # Fermeture imm√©diate
                self.ws.close()
                # Attendre tr√®s peu pour que la fermeture se propage
                from config.timeouts import TimeoutConfig
                time.sleep(TimeoutConfig.SHORT_SLEEP)
            except Exception:
                pass
            finally:
                # Forcer la fermeture si n√©cessaire
                try:
                    if hasattr(self.ws, "sock") and self.ws.sock:
                        self.ws.sock.close()
                except Exception:
                    pass
        
        # Nettoyer les r√©f√©rences pour √©viter les fuites m√©moire
        self.ws = None
        self.on_ticker_callback = None
        self.on_open_callback = None
        self.on_close_callback = None
        self.on_error_callback = None

    def close(self):
        """
        Ferme proprement la connexion WebSocket.
        
        CORRECTIF : Utilise _cleanup() pour garantir le nettoyage.
        """
        self.running = False
        self._cleanup()

