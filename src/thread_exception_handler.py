#!/usr/bin/env python3
"""
Gestionnaire global des exceptions non captur√©es dans les threads et asyncio.

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üìñ GUIDE DE LECTURE                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Ce module installe des handlers globaux pour capturer les exceptions qui
√©chappent aux blocs try/except dans les threads et les t√¢ches asyncio.

üéØ POURQUOI C'EST IMPORTANT :

Sans ces handlers :
- Une exception dans un thread peut tuer le thread silencieusement
- Une exception dans une t√¢che asyncio peut passer inaper√ßue
- Le bot continue √† tourner avec des composants cass√©s sans le savoir

Avec ces handlers :
- ‚úÖ Toutes les exceptions sont logg√©es avec contexte complet
- ‚úÖ Stack trace compl√®te pour faciliter le debugging
- ‚úÖ Nom du thread/t√¢che pour identifier la source
- ‚úÖ Pas de crash silencieux

üîç COMPRENDRE CE FICHIER EN 2 MINUTES :

1. global_thread_exception_handler() (lignes 45-79)
   ‚îî‚îÄ> Capte les exceptions dans les threads standard
   
2. global_asyncio_exception_handler() (lignes 81-113)
   ‚îî‚îÄ> Capte les exceptions dans les t√¢ches asyncio
   
3. install_global_exception_handlers() (lignes 115-141)
   ‚îî‚îÄ> Fonction √† appeler au d√©marrage du bot

üìö EXEMPLE D'UTILISATION :

```python
from thread_exception_handler import install_global_exception_handlers

# Au d√©marrage du bot
install_global_exception_handlers(logger)

# Maintenant tous les threads et t√¢ches asyncio sont prot√©g√©s
```

üõ°Ô∏è CAS D'USAGE COUVERTS :

Thread standard :
```python
def worker():
    raise ValueError("Oups!")  # Sera logg√©e automatiquement

threading.Thread(target=worker).start()
```

T√¢che asyncio :
```python
async def task():
    raise ValueError("Oups!")  # Sera logg√©e automatiquement

asyncio.create_task(task())
```

üìñ R√âF√âRENCES :
- threading.excepthook: https://docs.python.org/3/library/threading.html#threading.excepthook
- asyncio exception handler: https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.set_exception_handler
"""

import threading
import asyncio
import sys
from typing import Optional
from logging_setup import setup_logging


def global_thread_exception_handler(args):
    """
    Handler global pour les exceptions non captur√©es dans les threads.
    
    Ce handler est appel√© automatiquement par Python lorsqu'une exception
    √©chappe √† un thread sans √™tre captur√©e par un try/except.
    
    Il log l'exception avec le contexte complet : nom du thread, type d'exception,
    message et stack trace compl√®te.
    
    Args:
        args: ExceptHookArgs contenant :
            - exc_type: Type de l'exception (ex: ValueError)
            - exc_value: Instance de l'exception
            - exc_traceback: Traceback Python complet
            - thread: Thread o√π l'exception s'est produite
            
    Example:
        ```python
        # Cette exception sera automatiquement logg√©e
        def worker():
            raise ValueError("Erreur dans le thread")
        
        threading.Thread(target=worker, name="MonWorker").start()
        # ‚Üí Log: "‚ö†Ô∏è Exception non captur√©e dans thread MonWorker: ValueError: Erreur dans le thread"
        ```
        
    Note:
        - Ce handler ne STOP PAS le thread (comportement normal Python)
        - Il ne fait que logger pour tra√ßabilit√©
        - Le thread meurt apr√®s l'exception (comportement normal)
    """
    logger = setup_logging()
    
    # Extraire les informations de l'exception
    thread_name = args.thread.name if args.thread else "Unknown"
    exc_type_name = args.exc_type.__name__ if args.exc_type else "Unknown"
    exc_message = str(args.exc_value) if args.exc_value else ""
    
    # Logger l'exception avec contexte complet
    logger.error(
        f"‚ö†Ô∏è Exception non captur√©e dans thread '{thread_name}': "
        f"{exc_type_name}: {exc_message}",
        exc_info=(args.exc_type, args.exc_value, args.exc_traceback)
    )
    
    # Optionnel : Afficher aussi sur stderr pour debugging
    if hasattr(sys, 'stderr') and sys.stderr:
        print(
            f"\n‚ö†Ô∏è THREAD EXCEPTION [{thread_name}]: {exc_type_name}: {exc_message}",
            file=sys.stderr
        )


def global_asyncio_exception_handler(loop, context):
    """
    Handler global pour les exceptions dans la boucle √©v√©nementielle asyncio.
    
    Ce handler est appel√© lorsqu'une exception se produit dans :
    - Une t√¢che cr√©√©e avec asyncio.create_task() sans await
    - Un callback de la boucle √©v√©nementielle
    - Une coroutine fire-and-forget
    
    Il log l'exception avec le contexte asyncio complet.
    
    Args:
        loop: Event loop asyncio o√π l'exception s'est produite
        context: Dict contenant :
            - 'message': Message descriptif
            - 'exception': Instance de l'exception (si disponible)
            - 'future'/'task': T√¢che/future o√π l'erreur s'est produite
            - 'handle': Handle du callback (si applicable)
            
    Example:
        ```python
        # Cette exception sera automatiquement logg√©e
        async def failing_task():
            raise ValueError("Erreur async")
        
        asyncio.create_task(failing_task())  # Fire-and-forget
        # ‚Üí Log: "‚ö†Ô∏è Exception asyncio: Task exception was never retrieved..."
        ```
        
    Note:
        - Ce handler NE STOP PAS la boucle √©v√©nementielle
        - Les autres t√¢ches continuent normalement
        - Permet de tracer les erreurs dans les t√¢ches fire-and-forget
    """
    logger = setup_logging()
    
    # Extraire le message d'erreur
    message = context.get('message', 'Exception asyncio')
    
    # Extraire l'exception si disponible
    exception = context.get('exception')
    
    # Logger selon la pr√©sence d'une exception
    if exception:
        logger.error(
            f"‚ö†Ô∏è Exception asyncio: {message}",
            exc_info=(type(exception), exception, exception.__traceback__)
        )
    else:
        # Pas d'exception, juste un message (rare)
        logger.warning(f"‚ö†Ô∏è √âv√©nement asyncio: {message} | Context: {context}")
    
    # Optionnel : Afficher sur stderr pour debugging
    if hasattr(sys, 'stderr') and sys.stderr and exception:
        print(
            f"\n‚ö†Ô∏è ASYNCIO EXCEPTION: {type(exception).__name__}: {exception}",
            file=sys.stderr
        )


def install_global_exception_handlers(logger: Optional[object] = None):
    """
    Installe les handlers globaux pour les exceptions non captur√©es.
    
    Cette fonction doit √™tre appel√©e une seule fois au d√©marrage du bot,
    avant de cr√©er des threads ou des t√¢ches asyncio.
    
    Elle installe :
    1. Handler pour les threads (threading.excepthook)
    2. Handler pour asyncio (loop.set_exception_handler)
    
    Args:
        logger: Logger optionnel pour confirmer l'installation
                Si None, utilise le logger par d√©faut
                
    Example:
        ```python
        # Au d√©marrage du bot (dans bot.py ou main)
        from thread_exception_handler import install_global_exception_handlers
        
        logger = setup_logging()
        install_global_exception_handlers(logger)
        
        # Maintenant tous les threads et t√¢ches sont prot√©g√©s !
        ```
        
    Note:
        - Safe √† appeler plusieurs fois (√©crase les anciens handlers)
        - Compatible Python 3.8+ (threading.excepthook ajout√© en 3.8)
        - Le handler asyncio est install√© pour la boucle actuelle
    """
    if logger is None:
        logger = setup_logging()
    
    # Installer le handler pour les threads
    # Disponible depuis Python 3.8
    if hasattr(threading, 'excepthook'):
        threading.excepthook = global_thread_exception_handler
        logger.info("‚úÖ Handler global pour exceptions threads install√©")
    else:
        logger.warning(
            "‚ö†Ô∏è threading.excepthook non disponible (Python < 3.8), "
            "exceptions threads non captur√©es globalement"
        )
    
    # Installer le handler pour asyncio (si une boucle existe)
    try:
        loop = asyncio.get_event_loop()
        loop.set_exception_handler(global_asyncio_exception_handler)
        logger.info("‚úÖ Handler global pour exceptions asyncio install√©")
    except RuntimeError:
        # Pas de boucle √©v√©nementielle active, on installe plus tard
        logger.debug(
            "Pas de boucle asyncio active, handler sera install√© au d√©marrage"
        )


def install_asyncio_handler_if_needed():
    """
    Installe le handler asyncio si pas d√©j√† fait.
    
    Utile √† appeler au d√©but d'une coroutine pour s'assurer que
    le handler est install√© dans la boucle √©v√©nementielle actuelle.
    
    Example:
        ```python
        async def main():
            install_asyncio_handler_if_needed()
            # ... reste du code
        ```
        
    Note:
        - Safe √† appeler plusieurs fois
        - Silencieux si d√©j√† install√©
    """
    try:
        loop = asyncio.get_running_loop()
        # V√©rifier si un handler custom est d√©j√† install√©
        current_handler = loop.get_exception_handler()
        if current_handler is None or current_handler != global_asyncio_exception_handler:
            loop.set_exception_handler(global_asyncio_exception_handler)
    except RuntimeError:
        # Pas de boucle en cours
        pass

