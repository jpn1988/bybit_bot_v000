#!/usr/bin/env python3
"""
D√©tecteur d'opportunit√©s pour le bot Bybit.

Cette classe est responsable de la d√©tection et de l'int√©gration
des opportunit√©s de trading.
"""

from typing import List, Dict, Optional, Callable
from logging_setup import setup_logging
from unified_data_manager import UnifiedDataManager
from watchlist_manager import WatchlistManager
from volatility_tracker import VolatilityTracker
from bybit_client import BybitPublicClient
from models.funding_data import FundingData


class OpportunityDetector:
    """
    D√©tecteur d'opportunit√©s pour identifier et int√©grer les opportunit√©s de trading.
    
    Responsabilit√© unique : D√©tecter les opportunit√©s et les int√©grer dans le syst√®me.
    """

    def __init__(
        self,
        data_manager: UnifiedDataManager,
        watchlist_manager: WatchlistManager,
        volatility_tracker: VolatilityTracker,
        testnet: bool = True,
        logger=None,
    ):
        """
        Initialise le d√©tecteur d'opportunit√©s.

        Args:
            data_manager: Gestionnaire de donn√©es
            watchlist_manager: Gestionnaire de watchlist
            volatility_tracker: Tracker de volatilit√©
            testnet: Utiliser le testnet (True) ou le march√© r√©el (False)
            logger: Logger pour les messages (optionnel)
        """
        self.data_manager = data_manager
        self.watchlist_manager = watchlist_manager
        self.volatility_tracker = volatility_tracker
        self.testnet = testnet
        self.logger = logger or setup_logging()
        
        # Callback pour les nouvelles opportunit√©s
        self._on_new_opportunity_callback: Optional[Callable] = None
        
        # R√©f√©rence au WebSocket pour optimisation
        self.ws_manager = None

    def set_ws_manager(self, ws_manager):
        """
        D√©finit le gestionnaire WebSocket principal.

        Args:
            ws_manager: Gestionnaire WebSocket principal
        """
        self.ws_manager = ws_manager

    def set_on_new_opportunity_callback(self, callback: Callable):
        """
        D√©finit le callback pour les nouvelles opportunit√©s.

        Args:
            callback: Fonction √† appeler lors de nouvelles opportunit√©s
        """
        self._on_new_opportunity_callback = callback

    def scan_for_opportunities(
        self, base_url: str, perp_data: Dict
    ) -> Optional[Dict]:
        """
        Scanne le march√© pour trouver de nouvelles opportunit√©s.

        Args:
            base_url: URL de base de l'API
            perp_data: Donn√©es des perp√©tuels

        Returns:
            Dict avec les opportunit√©s trouv√©es ou None
        """
        try:
            # Optimisation : √©viter le scan si WebSocket d√©j√† actif
            if self._is_websocket_active():
                self.logger.info("üîÑ Scan √©vit√© - WebSocket d√©j√† actif")
                return None

            # Cr√©er un nouveau client pour √©viter les probl√®mes de futures
            client = BybitPublicClient(testnet=self.testnet, timeout=10)
            fresh_base_url = client.public_base_url()

            # Reconstruire la watchlist (peut prendre du temps)
            (
                linear_symbols,
                inverse_symbols,
                funding_data,
            ) = self.watchlist_manager.build_watchlist(
                fresh_base_url, perp_data, self.volatility_tracker
            )

            if linear_symbols or inverse_symbols:
                return {
                    "linear": linear_symbols,
                    "inverse": inverse_symbols,
                    "funding_data": funding_data,
                }

        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Erreur scan opportunit√©s: {e}")

        return None

    def integrate_opportunities(self, opportunities: Dict):
        """
        Int√®gre les nouvelles opportunit√©s d√©tect√©es.

        Args:
            opportunities: Dict avec les opportunit√©s √† int√©grer
        """
        linear_symbols = opportunities.get("linear", [])
        inverse_symbols = opportunities.get("inverse", [])
        funding_data = opportunities.get("funding_data", {})

        # R√©cup√©rer les symboles existants
        existing_linear = set(self.data_manager.storage.get_linear_symbols())
        existing_inverse = set(self.data_manager.storage.get_inverse_symbols())

        # Identifier les nouveaux symboles
        new_linear = set(linear_symbols) - existing_linear
        new_inverse = set(inverse_symbols) - existing_inverse

        if new_linear or new_inverse:
            # Mettre √† jour les listes de symboles
            self._update_symbol_lists(
                linear_symbols,
                inverse_symbols,
                existing_linear,
                existing_inverse,
            )

            # Mettre √† jour les donn√©es de funding
            self._update_funding_data(funding_data)

            # Notifier les nouvelles opportunit√©s
            self._notify_new_opportunities(linear_symbols, inverse_symbols)

    def _is_websocket_active(self) -> bool:
        """V√©rifie si le WebSocket principal est actif."""
        return (
            self.ws_manager
            and hasattr(self.ws_manager, "running")
            and self.ws_manager.running
        )

    def _update_symbol_lists(
        self,
        linear_symbols: List[str],
        inverse_symbols: List[str],
        existing_linear: set,
        existing_inverse: set,
    ):
        """Met √† jour les listes de symboles avec les nouvelles opportunit√©s."""
        # Fusionner les listes
        all_linear = list(existing_linear | set(linear_symbols))
        all_inverse = list(existing_inverse | set(inverse_symbols))

        # Mettre √† jour dans le data manager
        self.data_manager.storage.set_symbol_lists(all_linear, all_inverse)

    def _update_funding_data(self, new_funding_data: Dict):
        """Met √† jour les donn√©es de funding avec les nouvelles opportunit√©s (utilise Value Objects)."""
        # Mettre √† jour chaque symbole dans le data manager
        for symbol, data in new_funding_data.items():
            try:
                # Cr√©er un FundingData Value Object
                if isinstance(data, (list, tuple)) and len(data) >= 4:
                    funding, volume, funding_time, spread = data[:4]
                    volatility = data[4] if len(data) > 4 else None
                    
                    funding_obj = FundingData(
                        symbol=symbol,
                        funding_rate=funding,
                        volume_24h=volume,
                        next_funding_time=funding_time,
                        spread_pct=spread,
                        volatility_pct=volatility
                    )
                    
                elif isinstance(data, dict):
                    # Si c'est un dictionnaire, extraire les valeurs
                    funding = data.get("funding", 0.0)
                    volume = data.get("volume", 0.0)
                    funding_time = data.get("funding_time_remaining", "-")
                    spread = data.get("spread_pct", 0.0)
                    volatility = data.get("volatility_pct", None)
                    
                    funding_obj = FundingData(
                        symbol=symbol,
                        funding_rate=funding,
                        volume_24h=volume,
                        next_funding_time=funding_time,
                        spread_pct=spread,
                        volatility_pct=volatility
                    )
                else:
                    continue
                
                # Stocker le Value Object
                self.data_manager.storage.set_funding_data_object(funding_obj)
                
            except (ValueError, TypeError) as e:
                self.logger.warning(f"‚ö†Ô∏è Erreur cr√©ation FundingData pour {symbol}: {e}")

        # Mettre √† jour les donn√©es originales si disponible
        self._update_original_funding_data()

    def _update_original_funding_data(self):
        """Met √† jour les donn√©es de funding originales."""
        try:
            original_data = self.watchlist_manager.get_original_funding_data()
            for symbol, next_funding_time in original_data.items():
                self.data_manager.storage.update_original_funding_data(
                    symbol, next_funding_time
                )
        except Exception as e:
            self.logger.warning(
                f"‚ö†Ô∏è Erreur mise √† jour donn√©es originales: {e}"
            )

    def _notify_new_opportunities(
        self, linear_symbols: List[str], inverse_symbols: List[str]
    ):
        """Notifie les nouvelles opportunit√©s via callback."""
        if self._on_new_opportunity_callback:
            try:
                self._on_new_opportunity_callback(linear_symbols, inverse_symbols)
            except Exception as e:
                self.logger.warning(
                    f"‚ö†Ô∏è Erreur callback nouvelles opportunit√©s: {e}"
                )

