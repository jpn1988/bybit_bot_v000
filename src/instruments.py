#!/usr/bin/env python3
"""
Module pour r√©cup√©rer et filtrer les instruments perp√©tuels Bybit.

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üìñ GUIDE DE LECTURE                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Ce module r√©cup√®re la liste des contrats perp√©tuels actifs depuis l'API Bybit
et d√©termine leur cat√©gorie (linear vs inverse) via un mapping officiel ou
une heuristique bas√©e sur le nom du symbole.

üîç FONCTIONS PRINCIPALES :

1. get_perp_symbols() - R√©cup√®re tous les perp√©tuels actifs
2. category_of_symbol() - D√©termine la cat√©gorie d'un symbole
3. is_perpetual_active() - Filtre les perp√©tuels actifs uniquement

üè∑Ô∏è CAT√âGORIES DE CONTRATS :

Linear (USDT perpetual) :
- Exemples : BTCUSDT, ETHUSDT, SOLUSDT
- Marg√© en USDT (stablecoin)
- Plus courants et liquides
- Heuristique : Contient "USDT" dans le nom

Inverse (Coin-margined) :
- Exemples : BTCUSD, ETHUSD
- Marg√© en crypto (BTC, ETH, etc.)
- Moins courants
- Heuristique : PAS de "USDT" dans le nom

üéØ HEURISTIQUE DE CAT√âGORISATION :

La fonction category_of_symbol() utilise une strat√©gie √† 2 niveaux :

Priorit√© 1 : Mapping officiel (si disponible)
    ‚îú‚îÄ> Utilise le mapping symbol‚Üícategory fourni par l'API
    ‚îî‚îÄ> Garantit 100% de pr√©cision

Priorit√© 2 : Heuristique (fallback)
    ‚îú‚îÄ> Si "USDT" dans symbole ‚Üí "linear"
    ‚îî‚îÄ> Sinon ‚Üí "inverse"

Exemple :
    symbol = "BTCUSDT"
    ‚Üí Contient "USDT" ‚Üí Cat√©gorie : "linear" ‚úÖ
    
    symbol = "BTCUSD"
    ‚Üí Ne contient pas "USDT" ‚Üí Cat√©gorie : "inverse" ‚úÖ
    
    symbol = "ETHPERP"
    ‚Üí Ne contient pas "USDT" ‚Üí Cat√©gorie : "inverse"
    (Note : Rare, mais l'heuristique g√®re ce cas)

‚ö†Ô∏è LIMITES DE L'HEURISTIQUE :

L'heuristique est fiable √† ~99% mais peut √©chouer dans ces cas rares :
- Symboles non-standard (ex: "USDTPERP" serait class√© "linear")
- Futurs formats de Bybit non anticip√©s
- Nouveaux types de contrats

Solution : Toujours utiliser le mapping officiel quand disponible !

üìö EXEMPLE D'UTILISATION :

```python
from instruments import get_perp_symbols, category_of_symbol

# R√©cup√©rer tous les perp√©tuels
perp_data = get_perp_symbols(base_url="https://api.bybit.com")
print(f"Total: {perp_data['total']} perp√©tuels")
print(f"Linear: {len(perp_data['linear'])}")
print(f"Inverse: {len(perp_data['inverse'])}")

# D√©terminer la cat√©gorie d'un symbole
categories = perp_data['categories']
cat = category_of_symbol("BTCUSDT", categories)
print(f"BTCUSDT est {cat}")  # "linear"
```

üìñ R√âF√âRENCES :
- API Bybit instruments-info: https://bybit-exchange.github.io/docs/v5/market/instrument
"""

import httpx
from http_client_manager import get_http_client
from http_utils import get_rate_limiter
from typing import Dict, List

# Rate limiter global pour toutes les requ√™tes
_rate_limiter = get_rate_limiter()


def fetch_instruments_info(
    base_url: str, category: str, timeout: int = 10
) -> List[Dict]:
    """
    R√©cup√®re la liste des instruments via l'API Bybit.

    Args:
        base_url (str): URL de base de l'API Bybit
        category (str): Cat√©gorie des instruments (linear, inverse)
        timeout (int): Timeout pour les requ√™tes HTTP en secondes

    Returns:
        List[Dict]: Liste des instruments r√©cup√©r√©s

    Raises:
        RuntimeError: En cas d'erreur HTTP ou API
    """
    all_instruments = []
    cursor = ""

    while True:
        # Construire l'URL avec pagination
        url = f"{base_url}/v5/market/instruments-info"
        params = {"category": category, "limit": 1000}
        if cursor:
            params["cursor"] = cursor

        try:
            _rate_limiter.acquire()
            client = get_http_client(timeout=timeout)
            response = client.get(url, params=params)

            # V√©rifier le statut HTTP
            if response.status_code >= 400:
                raise RuntimeError(
                    f'Erreur HTTP Bybit: status={response.status_code} '
                    f'detail="{response.text[:100]}"'
                )

            data = response.json()

            # V√©rifier le retCode
            if data.get("retCode") != 0:
                ret_code = data.get("retCode")
                ret_msg = data.get("retMsg", "")
                raise RuntimeError(
                    f'Erreur API Bybit: retCode={ret_code} retMsg="{ret_msg}"'
                )

            result = data.get("result", {})
            instruments = result.get("list", [])
            all_instruments.extend(instruments)

            # V√©rifier s'il y a une page suivante
            next_page_cursor = result.get("nextPageCursor")
            if not next_page_cursor:
                break
            cursor = next_page_cursor

        except httpx.RequestError as e:
            raise RuntimeError(f"Erreur r√©seau/HTTP Bybit: {e}")
        except Exception as e:
            if "Erreur" in str(e):
                raise
            else:
                raise RuntimeError(f"Erreur r√©seau/HTTP Bybit: {e}")

    return all_instruments


def is_perpetual_active(item: Dict) -> bool:
    """
    V√©rifie si un instrument est un perp√©tuel actif.

    Args:
        item (Dict): Donn√©es de l'instrument

    Returns:
        bool: True si c'est un perp√©tuel actif
    """
    contract_type = item.get("contractType", "").lower()
    status = item.get("status", "").lower()
    symbol = item.get("symbol", "")

    # Liste noire des symboles en cours de d√©listing ou probl√©matiques
    delisted_symbols = {
        "LAUNCHCOINUSDT",  # En cours de d√©listing (erreur 30228)
        # Ajouter d'autres symboles probl√©matiques ici si n√©cessaire
    }

    # Exclure les symboles en cours de d√©listing
    if symbol in delisted_symbols:
        return False

    # V√©rifier le type de contrat (perp√©tuel)
    is_perpetual = contract_type in {"linearperpetual", "inverseperpetual"}

    # V√©rifier le statut (actif)
    is_active = status in {"trading", "listed"}

    return is_perpetual and is_active


def extract_symbol(item: Dict) -> str:
    """
    Extrait le symbole d'un instrument.

    Args:
        item (Dict): Donn√©es de l'instrument

    Returns:
        str: Symbole de l'instrument
    """
    return item.get("symbol", "")


def get_perp_symbols(base_url: str, timeout: int = 10) -> Dict:
    """
    R√©cup√®re et filtre les symboles de perp√©tuels actifs.

    Args:
        base_url (str): URL de base de l'API Bybit
        timeout (int): Timeout pour les requ√™tes HTTP en secondes

    Returns:
        Dict: Dictionnaire avec les symboles linear, inverse et le total
    """
    linear_symbols = []
    inverse_symbols = []
    categories: Dict[str, str] = {}

    # R√©cup√©rer les instruments linear
    linear_instruments = fetch_instruments_info(base_url, "linear", timeout)
    for item in linear_instruments:
        if is_perpetual_active(item):
            symbol = extract_symbol(item)
            if symbol:
                linear_symbols.append(symbol)
                categories[symbol] = "linear"

    # R√©cup√©rer les instruments inverse
    inverse_instruments = fetch_instruments_info(base_url, "inverse", timeout)
    for item in inverse_instruments:
        if is_perpetual_active(item):
            symbol = extract_symbol(item)
            if symbol:
                inverse_symbols.append(symbol)
                categories[symbol] = "inverse"

    return {
        "linear": linear_symbols,
        "inverse": inverse_symbols,
        "total": len(linear_symbols) + len(inverse_symbols),
        "categories": categories,  # mapping officiel symbole -> cat√©gorie
        # ('linear'|'inverse')
    }


def category_of_symbol(
    symbol: str, categories: Dict[str, str] | None = None
) -> str:
    """
    D√©termine la cat√©gorie d'un symbole avec mapping officiel + heuristique fallback.
    
    Cette fonction utilise une strat√©gie √† 2 niveaux pour garantir la pr√©cision :
    1. PRIORIT√â : Mapping officiel de l'API Bybit (100% pr√©cis)
    2. FALLBACK : Heuristique bas√©e sur le nom (fiable √† ~99%)
    
    Heuristique :
    - Si "USDT" dans le symbole ‚Üí "linear" (USDT perpetual)
    - Sinon ‚Üí "inverse" (Coin-margined)
    
    Exemples :
        category_of_symbol("BTCUSDT", categories)  # "linear" (USDT)
        category_of_symbol("BTCUSD", categories)   # "inverse" (coin)
        category_of_symbol("ETHUSDT", {})          # "linear" (heuristique)
        category_of_symbol("ETHUSD", None)         # "inverse" (heuristique)

    Args:
        symbol (str): Symbole Bybit √† cat√©goriser
                     Exemples: "BTCUSDT", "ETHUSDT", "BTCUSD"
        categories (Dict[str, str] | None): Mapping officiel {symbol: category}
                                          Fourni par get_perp_symbols()['categories']
                                          Si None ou vide, utilise l'heuristique

    Returns:
        str: Cat√©gorie du symbole
            - "linear" : Contrat USDT perpetual (ex: BTCUSDT)
            - "inverse" : Contrat coin-margined (ex: BTCUSD)
            
    Note:
        - Toujours pr√©f√©rer le mapping officiel quand disponible
        - L'heuristique est fiable √† ~99% mais peut √©chouer sur symboles non-standard
        - En cas d'erreur, retourne le r√©sultat de l'heuristique (safe)
        
    Example:
        ```python
        # Avec mapping officiel
        perp_data = get_perp_symbols(base_url)
        cat = category_of_symbol("BTCUSDT", perp_data['categories'])
        print(cat)  # "linear" (depuis l'API)
        
        # Sans mapping (fallback heuristique)
        cat = category_of_symbol("ETHUSDT", None)
        print(cat)  # "linear" (heuristique : contient "USDT")
        ```
    """
    try:
        # PRIORIT√â 1 : Utiliser le mapping officiel si disponible et valide
        if (
            categories  # Mapping fourni
            and symbol in categories  # Symbole pr√©sent dans le mapping
            and categories[symbol] in ("linear", "inverse")  # Valeur valide
        ):
            # ‚úÖ Utiliser la cat√©gorie officielle (100% pr√©cis)
            return categories[symbol]
        
        # PRIORIT√â 2 : Fallback sur l'heuristique bas√©e sur le nom
        # Heuristique : Si "USDT" dans le symbole ‚Üí linear, sinon ‚Üí inverse
        # Fiabilit√© : ~99% (√©choue sur symboles non-standard rares)
        #
        # Exemples :
        # - "BTCUSDT" contient "USDT" ‚Üí "linear" ‚úÖ
        # - "ETHUSDT" contient "USDT" ‚Üí "linear" ‚úÖ
        # - "BTCUSD" ne contient pas "USDT" ‚Üí "inverse" ‚úÖ
        # - "ETHUSD" ne contient pas "USDT" ‚Üí "inverse" ‚úÖ
        return "linear" if "USDT" in symbol else "inverse"
    except Exception:
        # En cas d'erreur inattendue, utiliser l'heuristique (safe)
        return "linear" if "USDT" in symbol else "inverse"
