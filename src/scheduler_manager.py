#!/usr/bin/env python3
"""
Gestionnaire de planification pour le bot Bybit.

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üìñ GUIDE DE LECTURE                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Ce module g√®re la planification temporelle du bot, notamment pour le
funding sniping et autres op√©rations programm√©es.

üîç COMPRENDRE CE MODULE :

1. SchedulerManager : Classe principale pour la gestion du timing
   ‚îú‚îÄ> __init__() : Initialise le logger
   ‚îî‚îÄ> run() : M√©thode principale (sera impl√©ment√©e plus tard)

üìö FLUX D√âTAILL√â : Ce module sera √©tendu pour g√©rer :
- Timing des op√©rations de funding
- Planification des t√¢ches p√©riodiques
- Coordination temporelle avec les autres composants

üéØ COMPOSANTS UTILIS√âS :
- Logger : Pour les messages de debug et d'information
- Watchlist data : Donn√©es de surveillance pour le timing
"""

import asyncio
import re
from typing import Dict, Any


class SchedulerManager:
    """
    Gestionnaire de planification pour le bot Bybit.
    
    Cette classe g√®re la planification temporelle des op√©rations,
    notamment pour le funding sniping et autres t√¢ches programm√©es.
    """

    def __init__(self, logger, funding_threshold_minutes=60, bybit_client=None, auto_trading_config=None):
        """
        Initialise le gestionnaire de planification.
        
        Args:
            logger: Logger pour les messages de debug et d'information
            funding_threshold_minutes: Seuil de d√©tection du funding imminent (en minutes)
            bybit_client: Client Bybit pour passer des ordres (optionnel)
            auto_trading_config: Configuration du trading automatique (optionnel)
        """
        self.logger = logger
        self.scan_interval = 5  # secondes
        self.funding_threshold_minutes = funding_threshold_minutes
        self.bybit_client = bybit_client
        self.auto_trading_config = auto_trading_config or {}
        
        # Tracking des ordres pass√©s pour √©viter les doublons
        self.orders_placed = set()
        
        # Optimisation: √©viter les scans trop fr√©quents
        self.last_scan_time = 0
        
        self.logger.info("üïí Scheduler initialis√©")

    def set_threshold(self, minutes: float):
        """
        Permet de modifier dynamiquement le seuil de d√©tection du funding imminent.
        
        Args:
            minutes: Seuil en minutes pour d√©tecter le funding imminent
        """
        self.funding_threshold_minutes = minutes
        self.logger.info(f"üõ†Ô∏è [SCHEDULER] Seuil Funding T d√©fini √† {minutes} min")

    def parse_funding_time(self, funding_t_str: str) -> int:
        """
        Convertit un texte '2h 15m 30s' ou '22m 59s' en secondes.
        
        Args:
            funding_t_str: Cha√Æne de temps au format "Xh Ym Zs" ou "Ym Zs"
            
        Returns:
            int: Nombre de secondes total
        """
        if not funding_t_str or funding_t_str == "-":
            return 0
            
        h = m = s = 0
        if match := re.search(r"(\d+)h", funding_t_str):
            h = int(match.group(1))
        if match := re.search(r"(\d+)m", funding_t_str):
            m = int(match.group(1))
        if match := re.search(r"(\d+)s", funding_t_str):
            s = int(match.group(1))
        return h * 3600 + m * 60 + s

    def _should_place_order(self, symbol: str, remaining_seconds: int) -> bool:
        """
        D√©termine si un ordre doit √™tre plac√© pour cette paire.
        
        Args:
            symbol: Symbole de la paire
            remaining_seconds: Secondes restantes avant le funding
            
        Returns:
            bool: True si un ordre doit √™tre plac√©
        """
        # V√©rifier si le trading automatique est activ√©
        if not self.auto_trading_config.get('enabled', False):
            return False
            
        # V√©rifier si on a d√©j√† pass√© un ordre pour cette paire
        if symbol in self.orders_placed:
            return False
            
        # Trade imm√©diatement quand une opportunit√© est d√©tect√©e
        # Plus de v√©rification de d√©lai - trade d√®s que le scheduler d√©tecte une paire
        return True

    def _place_automatic_order(self, symbol: str, funding_rate: float, current_price: float) -> bool:
        """
        Place un ordre automatique pour la paire donn√©e.
        
        Args:
            symbol: Symbole de la paire
            funding_rate: Taux de funding actuel
            current_price: Prix actuel de la paire
            
        Returns:
            bool: True si l'ordre a √©t√© plac√© avec succ√®s
        """
        try:
            # V√©rifier le mode dry-run
            if self.auto_trading_config.get('dry_run', False):
                self.logger.info(f"üß™ [DRY-RUN] Ordre simul√© pour {symbol}: {funding_rate:.4f} @ {current_price}")
                self.orders_placed.add(symbol)
                return True
                
            # D√©terminer le c√¥t√© de l'ordre bas√© sur le funding rate
            # S'assurer que funding_rate est un float
            funding_rate_float = float(funding_rate) if funding_rate is not None else 0.0
            side = "Buy" if funding_rate_float > 0 else "Sell"
            
            # Calculer la quantit√© en USDT
            order_size_usdt = self.auto_trading_config.get('order_size_usdt', 10)
            
            # Calculer la quantit√© de base
            base_qty = order_size_usdt / current_price
            
            # R√©cup√©rer les informations du symbole pour conna√Ætre les r√®gles
            try:
                # Utiliser un thread d√©di√© pour √©viter PERF-002
                import concurrent.futures
                
                def _get_instruments_info_sync():
                    return self.bybit_client.get_instruments_info(category="linear", symbol=symbol)
                
                # Ex√©cuter dans un thread d√©di√©
                with concurrent.futures.ThreadPoolExecutor() as executor:
                    future = executor.submit(_get_instruments_info_sync)
                    instruments_info = future.result()
                
                if instruments_info and 'list' in instruments_info and instruments_info['list']:
                    symbol_info = instruments_info['list'][0]
                    lot_size_filter = symbol_info.get('lotSizeFilter', {})
                    min_qty = float(lot_size_filter.get('minOrderQty', '0.001'))
                    qty_step = float(lot_size_filter.get('qtyStep', '0.001'))
                    
                    # Ajuster la quantit√© selon les r√®gles du symbole
                    # Arrondir √† la valeur minimale requise
                    if base_qty < min_qty:
                        qty = str(min_qty)
                        self.logger.info(f"üìä [TRADING] Quantit√© ajust√©e au minimum pour {symbol}: {qty}")
                    else:
                        # Arrondir selon le step requis
                        adjusted_qty = round(base_qty / qty_step) * qty_step
                        qty = f"{adjusted_qty:.6f}".rstrip('0').rstrip('.')
                        if not qty or qty == '0':
                            qty = str(min_qty)
                else:
                    # Fallback si pas d'infos du symbole
                    qty = f"{max(base_qty, 0.001):.6f}".rstrip('0').rstrip('.')
                    if not qty or qty == '0':
                        qty = "0.001"
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è [TRADING] Impossible de r√©cup√©rer les infos du symbole {symbol}: {e}")
                # Fallback simple
                qty = f"{max(base_qty, 0.001):.6f}".rstrip('0').rstrip('.')
                if not qty or qty == '0':
                    qty = "0.001"
            
            # Calculer le prix limite avec offset
            offset_percent = self.auto_trading_config.get('order_offset_percent', 0.1) / 100
            if side == "Buy":
                limit_price = current_price * (1 + offset_percent)  # Prix plus √©lev√© pour Buy
            else:
                limit_price = current_price * (1 - offset_percent)  # Prix plus bas pour Sell
                
            # Passer l'ordre
            if not self.bybit_client:
                self.logger.error("‚ùå [TRADING] Client Bybit non disponible")
                return False
            
            # Utiliser un thread d√©di√© pour √©viter PERF-002
            import concurrent.futures
            
            def _place_order_sync():
                return self.bybit_client.place_order(
                    symbol=symbol,
                    side=side,
                    order_type="Limit",
                    qty=qty,
                    price=str(limit_price),
                    category="linear"
                )
            
            # Ex√©cuter dans un thread d√©di√©
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(_place_order_sync)
                response = future.result()
            
            # Marquer l'ordre comme pass√©
            self.orders_placed.add(symbol)
            
            self.logger.info(
                f"‚úÖ [TRADING] Ordre plac√© pour {symbol}: {side} {qty} @ {limit_price:.4f} "
                f"(funding: {funding_rate_float:.4f})"
            )
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå [TRADING] Erreur lors du placement d'ordre pour {symbol}: {e}")
            # Ne pas marquer l'ordre comme pass√© en cas d'erreur
            return False

    def _handle_automatic_trading(self, symbol: str, remaining_seconds: int, first_data: dict):
        """
        G√®re le trading automatique pour une paire donn√©e.
        
        Args:
            symbol: Symbole de la paire
            remaining_seconds: Secondes restantes avant le funding
            first_data: Donn√©es de la premi√®re paire
        """
        # V√©rifier si un ordre automatique doit √™tre plac√©
        if self._should_place_order(symbol, remaining_seconds):
            # R√©cup√©rer le prix actuel et le funding rate
            try:
                # Obtenir le prix actuel depuis le carnet d'ordres
                if self.bybit_client:
                    # Utiliser un thread d√©di√© pour √©viter PERF-002
                    import concurrent.futures
                    import asyncio
                    
                    def _get_orderbook_sync():
                        return self.bybit_client.get_orderbook(symbol=symbol, limit=1)
                    
                    # Ex√©cuter dans un thread d√©di√©
                    with concurrent.futures.ThreadPoolExecutor() as executor:
                        future = executor.submit(_get_orderbook_sync)
                        orderbook = future.result()
                    
                    if orderbook and 'b' in orderbook and 'a' in orderbook:
                        bid_price = float(orderbook['b'][0][0]) if orderbook['b'] else 0
                        ask_price = float(orderbook['a'][0][0]) if orderbook['a'] else 0
                        current_price = (bid_price + ask_price) / 2
                        
                        # R√©cup√©rer le funding rate depuis les donn√©es de la watchlist
                        funding_rate = first_data.get('funding_rate', 0)
                        
                        # Placer l'ordre automatique
                        self._place_automatic_order(symbol, funding_rate, current_price)
                    else:
                        self.logger.warning(f"‚ö†Ô∏è [TRADING] Impossible de r√©cup√©rer le prix pour {symbol}")
                else:
                    self.logger.warning(f"‚ö†Ô∏è [TRADING] Client Bybit non disponible pour {symbol}")
            except Exception as e:
                self.logger.error(f"‚ùå [TRADING] Erreur lors de la r√©cup√©ration des donn√©es pour {symbol}: {e}")

    async def run_with_callback(self, data_callback):
        """
        M√©thode principale du scheduler avec callback pour r√©cup√©rer les donn√©es √† jour.
        
        Args:
            data_callback: Fonction qui retourne les donn√©es de funding format√©es
        """
        self.logger.info(f"üïí Scheduler d√©marr√© (seuil Funding T = {self.funding_threshold_minutes} min)")
        
        while True:
            try:
                # R√©cup√©rer les donn√©es √† jour via le callback
                watchlist_data = data_callback()
                
                # V√©rifier si les donn√©es sont disponibles
                if not watchlist_data:
                    self.logger.debug(f"üïí [SCHEDULER] Aucune donn√©e disponible (prochain scan dans {self.scan_interval}s)")
                    await asyncio.sleep(self.scan_interval)
                    continue
                
                imminent_pairs = []
                
                # S√©lectionner UNIQUEMENT la premi√®re paire de la watchlist
                first_symbol = None
                first_data = None
                
                # R√©cup√©rer la premi√®re paire de la watchlist
                for symbol, data in watchlist_data.items():
                    if isinstance(data, dict):
                        first_symbol = symbol
                        first_data = data
                        break
                
                if first_symbol and first_data:
                    # R√©cup√©rer le funding time format√© (ex: "22m 59s")
                    funding_t_str = first_data.get('next_funding_time', None)
                    
                    if funding_t_str and funding_t_str != "-":
                        # Convertir la cha√Æne en secondes
                        remaining_seconds = self.parse_funding_time(funding_t_str)
                        
                        # Log debug pour le suivi (avec plus de d√©tails)
                        self.logger.debug(f"[SCHEDULER] {first_symbol}: funding={funding_t_str} ({remaining_seconds}s) - Seuil: {self.funding_threshold_minutes}min")
                        
                        # V√©rifier si le funding est imminent selon le seuil
                        if remaining_seconds > 0 and remaining_seconds <= self.funding_threshold_minutes * 60:
                            imminent_pairs.append({
                                'symbol': first_symbol,
                                'remaining_seconds': remaining_seconds,
                                'remaining_minutes': remaining_seconds / 60
                            })
                
                # Afficher les paires avec funding imminent et g√©rer le trading automatique
                if imminent_pairs:
                    for pair in imminent_pairs:
                        symbol = pair['symbol']
                        remaining_seconds = pair['remaining_seconds']
                        
                        self.logger.info(
                            f"‚ö° [SCHEDULER] {symbol} funding imminent ‚Üí "
                            f"{remaining_seconds:.0f}s (seuil={self.funding_threshold_minutes}min)"
                        )
                        
                        # R√©cup√©rer les donn√©es sp√©cifiques √† cette paire
                        pair_data = watchlist_data.get(symbol, {})
                        
                        # G√©rer le trading automatique
                        self._handle_automatic_trading(symbol, remaining_seconds, pair_data)
                else:
                    self.logger.debug(
                        f"üïí [SCHEDULER] Aucune paire proche du funding "
                        f"(prochain scan dans {self.scan_interval}s)"
                    )
                
                # Attendre avant le prochain scan
                await asyncio.sleep(self.scan_interval)
                
            except Exception as e:
                self.logger.error(f"‚ùå [SCHEDULER] Erreur dans la boucle de scan: {e}")
                await asyncio.sleep(self.scan_interval)

    async def run(self, watchlist_data: Dict[str, Any]):
        """
        M√©thode principale du scheduler - analyse r√©guli√®rement la watchlist
        pour d√©tecter les paires dont le Funding T est proche du seuil.
        
        Args:
            watchlist_data: Donn√©es de la watchlist pour le timing
        """
        self.logger.info(f"üïí Scheduler d√©marr√© (seuil Funding T = {self.funding_threshold_minutes} min)")
        
        while True:
            try:
                imminent_pairs = []
                
                # Analyser seulement la premi√®re paire de la watchlist
                first_symbol = None
                first_data = None
                
                # R√©cup√©rer la premi√®re paire
                for symbol, data in watchlist_data.items():
                    if isinstance(data, dict):
                        first_symbol = symbol
                        first_data = data
                        break
                
                if first_symbol and first_data:
                    # R√©cup√©rer le funding time format√© (ex: "22m 59s")
                    funding_t_str = first_data.get('next_funding_time', None)
                    
                    if funding_t_str and funding_t_str != "-":
                        # Convertir la cha√Æne en secondes
                        remaining_seconds = self.parse_funding_time(funding_t_str)
                        
                        # Log debug pour le suivi
                        self.logger.debug(f"[SCHEDULER] {first_symbol}: funding={funding_t_str} ({remaining_seconds}s)")
                        
                        # V√©rifier si le funding est imminent selon le seuil
                        if remaining_seconds > 0 and remaining_seconds <= self.funding_threshold_minutes * 60:
                            imminent_pairs.append({
                                'symbol': first_symbol,
                                'remaining_seconds': remaining_seconds,
                                'remaining_minutes': remaining_seconds / 60
                            })
                
                # Afficher les paires avec funding imminent
                if imminent_pairs:
                    for pair in imminent_pairs:
                        self.logger.info(
                            f"‚ö° [SCHEDULER] {pair['symbol']} funding imminent ‚Üí "
                            f"{pair['remaining_seconds']:.0f}s (seuil={self.funding_threshold_minutes}min)"
                        )
                else:
                    self.logger.debug(
                        f"üïí [SCHEDULER] Aucune paire proche du funding "
                        f"(prochain scan dans {self.scan_interval}s)"
                    )
                
                # Attendre avant le prochain scan
                await asyncio.sleep(self.scan_interval)
                
            except Exception as e:
                self.logger.error(f"‚ùå [SCHEDULER] Erreur dans la boucle de scan: {e}")
                await asyncio.sleep(self.scan_interval)
