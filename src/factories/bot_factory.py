#!/usr/bin/env python3
"""
Factory principale pour cr√©er un bot Bybit complet.

Cette factory orchestre l'ensemble du processus de cr√©ation d'un bot:
1. Cr√©ation de tous les composants via BotComponentFactory
2. Configuration de tous les callbacks via BotCallbackConfigurator
3. Retour d'un BotOrchestrator configur√© et pr√™t √† d√©marrer

Point d'entr√©e simplifi√© pour cr√©er un bot complet.
"""

from typing import Optional
from logging_setup import setup_logging
from config import get_settings
from .bot_component_factory import BotComponentFactory
from configuration.bot_callback_configurator import BotCallbackConfigurator

# Import BotOrchestrator sera fait localement pour √©viter les imports circulaires


class BotFactory:
    """
    Factory principale pour cr√©er un bot Bybit complet.
    
    Cette classe orchestre l'ensemble du processus de cr√©ation et
    configuration d'un bot, fournissant un point d'entr√©e simple et uniforme.
    
    Responsabilit√© unique : Orchestrer la cr√©ation compl√®te d'un bot
    
    Exemple d'utilisation:
        # Cr√©ation standard
        factory = BotFactory(logger=logger)
        orchestrator = factory.create_bot()
        
        # Cr√©ation avec testnet
        orchestrator = factory.create_bot(testnet=True)
        
        # D√©marrer le bot
        await orchestrator.start()
    """
    
    def __init__(self, logger=None):
        """
        Initialise la factory principale.
        
        Args:
            logger: Logger pour les messages (optionnel)
        """
        self.logger = logger or setup_logging()
    
    def create_bot(
        self,
        testnet: Optional[bool] = None,
        logger=None
    ):
        """
        Cr√©e un bot Bybit complet et configur√©.
        
        Cette m√©thode orchestre l'ensemble du processus:
        1. Cr√©ation de tous les composants via BotComponentFactory
        2. Configuration de tous les callbacks via BotCallbackConfigurator
        3. Cr√©ation du BotOrchestrator avec les composants configur√©s
        4. Retour du BotOrchestrator pr√™t √† d√©marrer
        
        Args:
            testnet: Utiliser le testnet (True) ou le march√© r√©el (False)
                    Si None, la valeur est lue depuis la configuration
            logger: Logger pour les messages (optionnel)
        
        Returns:
            BotOrchestrator: Bot configur√© et pr√™t √† d√©marrer
        
        Exemple:
            # Cr√©ation standard
            factory = BotFactory(logger=logger)
            orchestrator = factory.create_bot()
            
            # D√©marrer le bot
            await orchestrator.start()
        """
        # D√©terminer testnet depuis la configuration si non sp√©cifi√©
        if testnet is None:
            settings = get_settings()
            testnet = settings["testnet"]
        
        # Utiliser le logger fourni ou celui de l'instance
        active_logger = logger or self.logger
        
        self.logger.info(f"üè≠ Cr√©ation d'un bot Bybit ({'testnet' if testnet else 'mainnet'})...")
        
        try:
            # 1. Cr√©er tous les composants
            self.logger.debug("‚Üí √âtape 1/3: Cr√©ation des composants...")
            component_factory = BotComponentFactory(testnet=testnet, logger=active_logger)
            bundle = component_factory.create_all_components()
            
            # 2. Configurer tous les callbacks
            self.logger.debug("‚Üí √âtape 2/3: Configuration des callbacks...")
            callback_configurator = BotCallbackConfigurator(logger=active_logger)
            callback_configurator.configure_all_callbacks(bundle)
            
            # 3. Cr√©er le BotOrchestrator avec les composants configur√©s
            self.logger.debug("‚Üí √âtape 3/3: Cr√©ation du BotOrchestrator...")
            
            # Import local pour √©viter les imports circulaires
            from bot import BotOrchestrator
            
            orchestrator = BotOrchestrator(
                components_bundle=bundle,
                logger=active_logger
            )
            
            self.logger.info("‚úÖ Bot Bybit cr√©√© avec succ√®s")
            return orchestrator
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la cr√©ation du bot: {e}", exc_info=True)
            raise
