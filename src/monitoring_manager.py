#!/usr/bin/env python3
"""
Gestionnaire de surveillance unifi√© pour le bot Bybit.

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üìñ GUIDE DE LECTURE                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Ce fichier est le COORDINATEUR DE SURVEILLANCE du bot. Il orchestre
les composants sp√©cialis√©s sans impl√©menter directement la logique m√©tier.

üîç COMPRENDRE CE FICHIER EN 3 MINUTES :

1. __init__() (lignes 34-68) : Initialisation des r√©f√©rences
   ‚îî‚îÄ> Pr√©pare les r√©f√©rences aux managers externes

2. M√©thodes set_*() (lignes 70-113) : Configuration
   ‚îî‚îÄ> Injecte les d√©pendances n√©cessaires

3. start_continuous_monitoring() (lignes 115-140) : D√©marrage
   ‚îú‚îÄ> Initialise les composants de surveillance
   ‚îú‚îÄ> D√©marre le scan p√©riodique du march√©
   ‚îî‚îÄ> Configure la surveillance des candidats

4. stop_continuous_monitoring() (lignes 142-161) : Arr√™t propre
   ‚îî‚îÄ> Arr√™te tous les composants et nettoie les callbacks

üéØ COMPOSANTS COORDONN√âS :
- MarketScanner : Scan p√©riodique pour d√©tecter de nouvelles opportunit√©s
- OpportunityDetector : Analyse et int√®gre les opportunit√©s trouv√©es
- CandidateMonitor : Surveille les symboles proches des crit√®res

üìö FLUX TYPIQUE :
1. Cr√©ation du MonitoringManager
2. Configuration via set_watchlist_manager(), set_volatility_tracker(), etc.
3. D√©marrage via start_continuous_monitoring()
4. Callbacks automatiques lors de d√©couvertes
5. Arr√™t propre via stop_continuous_monitoring()

‚ö° RESPONSABILIT√â UNIQUE : Orchestration pure
   ‚Üí D√©l√®gue toute la logique m√©tier aux composants sp√©cialis√©s
"""

import asyncio
from typing import List, Dict, Optional, Callable
from logging_setup import setup_logging
from data_manager import DataManager
from watchlist_manager import WatchlistManager
from volatility_tracker import VolatilityTracker
from market_scanner import MarketScanner
from opportunity_detector import OpportunityDetector
from candidate_monitor import CandidateMonitor
from config.timeouts import ScanIntervalConfig


class MonitoringManager:
    """
    Coordinateur de surveillance pour le bot Bybit.

    Cette classe coordonne les diff√©rents composants de surveillance
    sans impl√©menter directement la logique m√©tier.
    
    Responsabilit√© unique : Orchestration des composants de surveillance.
    """

    def __init__(
        self,
        data_manager: DataManager,
        testnet: bool = True,
        logger=None,
        market_scanner: Optional[MarketScanner] = None,
        opportunity_detector: Optional[OpportunityDetector] = None,
        candidate_monitor: Optional[CandidateMonitor] = None,
    ):
        """
        Initialise le gestionnaire de surveillance unifi√©.

        Args:
            data_manager: Gestionnaire de donn√©es
            testnet: Utiliser le testnet (True) ou le march√© r√©el (False)
            logger: Logger pour les messages (optionnel)
            market_scanner: Scanner de march√© (optionnel, cr√©√©
            automatiquement si non fourni lors de l'initialisation)
            opportunity_detector: D√©tecteur d'opportunit√©s (optionnel, cr√©√©
            automatiquement si non fourni lors de l'initialisation)
            candidate_monitor: Moniteur de candidats (optionnel, cr√©√©
            automatiquement si non fourni lors de l'initialisation)
        """
        self.data_manager = data_manager
        self.testnet = testnet
        self.logger = logger or setup_logging()

        # √âtat de surveillance
        self._running = False

        # Gestionnaires externes
        self.watchlist_manager: Optional[WatchlistManager] = None
        self.volatility_tracker: Optional[VolatilityTracker] = None
        self.ws_manager = None  # R√©f√©rence au WebSocket principal

        # Composants de surveillance (injection avec initialisation paresseuse)
        self.market_scanner: Optional[MarketScanner] = market_scanner
        self.opportunity_detector: Optional[OpportunityDetector] = opportunity_detector
        self.candidate_monitor: Optional[CandidateMonitor] = candidate_monitor

        # Callbacks externes
        self._on_new_opportunity_callback: Optional[Callable] = None
        self._on_candidate_ticker_callback: Optional[Callable] = None

    def set_watchlist_manager(self, watchlist_manager: WatchlistManager):
        """
        D√©finit le gestionnaire de watchlist.

        Args:
            watchlist_manager: Gestionnaire de watchlist
        """
        self.watchlist_manager = watchlist_manager

    def set_volatility_tracker(self, volatility_tracker: VolatilityTracker):
        """
        D√©finit le tracker de volatilit√©.

        Args:
            volatility_tracker: Tracker de volatilit√©
        """
        self.volatility_tracker = volatility_tracker

    def set_ws_manager(self, ws_manager):
        """
        D√©finit le gestionnaire WebSocket principal.

        Args:
            ws_manager: Gestionnaire WebSocket principal
        """
        self.ws_manager = ws_manager

    def set_on_new_opportunity_callback(self, callback: Callable):
        """
        D√©finit le callback pour les nouvelles opportunit√©s.

        Args:
            callback: Fonction √† appeler lors de nouvelles opportunit√©s
        """
        self._on_new_opportunity_callback = callback

    def set_on_candidate_ticker_callback(self, callback: Callable):
        """
        D√©finit le callback pour les tickers des candidats.

        Args:
            callback: Fonction √† appeler pour chaque ticker candidat
        """
        self._on_candidate_ticker_callback = callback

    async def start_continuous_monitoring(
        self, base_url: str, perp_data: Dict
    ):
        """
        D√©marre la surveillance continue du march√©.

        Args:
            base_url: URL de base de l'API Bybit
            perp_data: Donn√©es des perp√©tuels

        Raises:
            ValueError: Si la configuration est invalide
            RuntimeError: Si l'initialisation √©choue
        """
        if self._running:
            self.logger.warning("‚ö†Ô∏è Surveillance continue d√©j√† active")
            return

        try:
            # Valider les param√®tres d'entr√©e
            self._validate_monitoring_params(base_url, perp_data)

            # Initialiser les composants si n√©cessaire
            self._initialize_components()

            self._running = True

            # D√©marrer le scan p√©riodique du march√©
            await self._start_market_scanning(base_url, perp_data)

            # Configurer la surveillance des candidats
            self._setup_candidate_monitoring(base_url, perp_data)

            self.logger.info("üîç Surveillance continue d√©marr√©e avec succ√®s")

        except ValueError as e:
            self.logger.error(f"‚ùå Configuration invalide : {e}")
            self._running = False
            raise
        except Exception as e:
            self.logger.error(f"‚ùå Erreur d√©marrage surveillance : {e}")
            self._running = False
            # Tenter un nettoyage
            await self._cleanup_on_error()
            raise RuntimeError(f"√âchec d√©marrage surveillance : {e}") from e

    async def stop_continuous_monitoring(self):
        """
        Arr√™te la surveillance continue de mani√®re propre.

        Cette m√©thode garantit un arr√™t propre de tous les composants
        m√™me en cas d'erreur sur l'un d'eux.
        """
        if not self._running:
            self.logger.debug("‚ÑπÔ∏è Surveillance d√©j√† arr√™t√©e")
            return

        self._running = False
        errors = []

        # Arr√™ter le scan du march√©
        if self.market_scanner:
            try:
                await self.market_scanner.stop_scanning()
                self.logger.debug("‚úì MarketScanner arr√™t√©")
            except Exception as e:
                errors.append(f"MarketScanner: {e}")
                self.logger.warning(f"‚ö†Ô∏è Erreur arr√™t MarketScanner : {e}")

        # Arr√™ter la surveillance des candidats
        if self.candidate_monitor:
            try:
                self.candidate_monitor.stop_monitoring()
                self.logger.debug("‚úì CandidateMonitor arr√™t√©")
            except Exception as e:
                errors.append(f"CandidateMonitor: {e}")
                self.logger.warning(f"‚ö†Ô∏è Erreur arr√™t CandidateMonitor : {e}")

        # Nettoyer les callbacks pour √©viter les fuites m√©moire
        self._on_new_opportunity_callback = None
        self._on_candidate_ticker_callback = None

        if errors:
            self.logger.warning(
                f"üõë Surveillance arr√™t√©e avec {len(errors)} erreur(s) : {', '.join(errors)}"
            )
        else:
            self.logger.info("üõë Surveillance continue arr√™t√©e proprement")

    def _initialize_components(self):
        """
        Initialise les composants de surveillance de mani√®re paresseuse.

        Cette m√©thode cr√©e uniquement les composants qui n'existent pas encore.
        Cela permet de r√©utiliser des composants d√©j√† configur√©s.

        Raises:
            ValueError: Si les d√©pendances requises ne sont pas configur√©es
        """
        # V√©rifier les d√©pendances obligatoires
        self._validate_required_dependencies()

        # Initialiser chaque composant de mani√®re ind√©pendante
        self._init_market_scanner()
        self._init_opportunity_detector()
        self._init_candidate_monitor()

        self.logger.debug("‚úì Composants de surveillance initialis√©s")

    def _validate_required_dependencies(self):
        """
        Valide que toutes les d√©pendances requises sont configur√©es.

        Raises:
            ValueError: Si une d√©pendance manque
        """
        if not self.watchlist_manager:
            raise ValueError("WatchlistManager doit √™tre configur√© via set_watchlist_manager()")

        if not self.volatility_tracker:
            raise ValueError("VolatilityTracker doit √™tre configur√© via set_volatility_tracker()")

    def _init_market_scanner(self):
        """Initialise le scanner de march√© si n√©cessaire."""
        if self.market_scanner:
            self.logger.debug("‚Üí MarketScanner d√©j√† initialis√©, r√©utilisation")
            return

        self.market_scanner = MarketScanner(
            scan_interval=ScanIntervalConfig.MARKET_SCAN, logger=self.logger
        )
        self.market_scanner.set_scan_callback(self._on_market_scan)
        self.logger.debug(f"‚Üí MarketScanner cr√©√© (intervalle: {ScanIntervalConfig.MARKET_SCAN}s)")

    def _init_opportunity_detector(self):
        """Initialise le d√©tecteur d'opportunit√©s si n√©cessaire."""
        if self.opportunity_detector:
            self.logger.debug("‚Üí OpportunityDetector d√©j√† initialis√©, r√©utilisation")
            return

        self.opportunity_detector = OpportunityDetector(
            data_manager=self.data_manager,
            watchlist_manager=self.watchlist_manager,
            volatility_tracker=self.volatility_tracker,
            testnet=self.testnet,
            logger=self.logger,
        )
        # Configurer les r√©f√©rences
        self.opportunity_detector.set_ws_manager(self.ws_manager)
        self.opportunity_detector.set_on_new_opportunity_callback(
            self._on_new_opportunity_callback
        )
        self.logger.debug("‚Üí OpportunityDetector cr√©√© et configur√©")

    def _init_candidate_monitor(self):
        """Initialise le moniteur de candidats si n√©cessaire."""
        if self.candidate_monitor:
            self.logger.debug("‚Üí CandidateMonitor d√©j√† initialis√©, r√©utilisation")
            return

        self.candidate_monitor = CandidateMonitor(
            data_manager=self.data_manager,
            watchlist_manager=self.watchlist_manager,
            testnet=self.testnet,
            logger=self.logger,
        )
        # Configurer le callback
        self.candidate_monitor.set_on_candidate_ticker_callback(
            self._on_candidate_ticker_callback
        )
        self.logger.debug("‚Üí CandidateMonitor cr√©√© et configur√©")

    async def _start_market_scanning(self, base_url: str, perp_data: Dict):
        """D√©marre le scan p√©riodique du march√©."""
        if self.market_scanner:
            await self.market_scanner.start_scanning(base_url, perp_data)

    async def _on_market_scan(self, base_url: str, perp_data: Dict):
        """
        Callback appel√© par le MarketScanner lors de chaque scan.
        
        Args:
            base_url: URL de base de l'API
            perp_data: Donn√©es des perp√©tuels
        """
        if not self.opportunity_detector:
            return

        # Scanner les opportunit√©s
        new_opportunities = self.opportunity_detector.scan_for_opportunities(
            base_url, perp_data
        )

        # Int√©grer les opportunit√©s si trouv√©es
        if new_opportunities:
            self.opportunity_detector.integrate_opportunities(new_opportunities)

    def _setup_candidate_monitoring(self, base_url: str, perp_data: Dict):
        """
        Configure la surveillance des symboles candidats.

        Args:
            base_url: URL de base de l'API Bybit
            perp_data: Donn√©es des perp√©tuels
        """
        if self.candidate_monitor:
            self.candidate_monitor.setup_monitoring(base_url, perp_data)

    def setup_candidate_monitoring(self, base_url: str, perp_data: Dict):
        """
        Configure la surveillance des symboles candidats.
        
        M√©thode publique pour compatibilit√© avec l'interface existante.

        Args:
            base_url: URL de base de l'API Bybit
            perp_data: Donn√©es des perp√©tuels
        """
        self._setup_candidate_monitoring(base_url, perp_data)

    def is_running(self) -> bool:
        """
        V√©rifie si le gestionnaire de surveillance est en cours d'ex√©cution.

        Returns:
            True si en cours d'ex√©cution
        """
        scanner_running = (
            self.market_scanner.is_running() if self.market_scanner else False
        )
        monitor_running = (
            self.candidate_monitor.is_running()
            if self.candidate_monitor
            else False
        )
        return self._running and (scanner_running or monitor_running)

    @property
    def candidate_symbols(self) -> List[str]:
        """
        Retourne la liste des symboles candidats surveill√©s.
        
        Propri√©t√© pour compatibilit√© avec l'interface existante.

        Returns:
            Liste des symboles candidats
        """
        if self.candidate_monitor:
            return self.candidate_monitor.get_candidate_symbols()
        return []

    # ===== M√âTHODES PRIV√âES DE VALIDATION ET SUPPORT =====

    def _validate_monitoring_params(self, base_url: str, perp_data: Dict):
        """
        Valide les param√®tres d'entr√©e pour la surveillance.

        Args:
            base_url: URL de base de l'API
            perp_data: Donn√©es des perp√©tuels

        Raises:
            ValueError: Si les param√®tres sont invalides
        """
        if not base_url or not isinstance(base_url, str):
            raise ValueError("base_url doit √™tre une cha√Æne non vide")

        if not perp_data or not isinstance(perp_data, dict):
            raise ValueError("perp_data doit √™tre un dictionnaire non vide")

        if "linear" not in perp_data or "inverse" not in perp_data:
            raise ValueError(
                "perp_data doit contenir les cl√©s 'linear' et 'inverse'"
            )

    async def _cleanup_on_error(self):
        """
        Nettoie les ressources en cas d'erreur lors du d√©marrage.

        Cette m√©thode est appel√©e automatiquement en cas d'erreur
        pour √©viter les fuites de ressources.
        """
        try:
            # Tenter d'arr√™ter les composants d√©j√† d√©marr√©s
            if self.market_scanner:
                await self.market_scanner.stop_scanning()
            if self.candidate_monitor:
                self.candidate_monitor.stop_monitoring()
        except Exception as e:
            self.logger.debug(f"Erreur lors du nettoyage : {e}")

    # ===== M√âTHODES DE DIAGNOSTIC ET SANT√â =====

    def get_health_status(self) -> Dict[str, any]:
        """
        Retourne l'√©tat de sant√© d√©taill√© du gestionnaire de surveillance.

        Returns:
            Dict contenant :
            - running: True si en cours d'ex√©cution
            - components: √âtat de chaque composant
            - candidate_count: Nombre de candidats surveill√©s
        """
        return {
            "running": self._running,
            "components": {
                "market_scanner": {
                    "initialized": self.market_scanner is not None,
                    "running": (
                        self.market_scanner.is_running()
                        if self.market_scanner
                        else False
                    ),
                },
                "opportunity_detector": {
                    "initialized": self.opportunity_detector is not None,
                },
                "candidate_monitor": {
                    "initialized": self.candidate_monitor is not None,
                    "running": (
                        self.candidate_monitor.is_running()
                        if self.candidate_monitor
                        else False
                    ),
                },
            },
            "candidate_count": len(self.candidate_symbols),
            "callbacks_configured": {
                "new_opportunity": self._on_new_opportunity_callback is not None,
                "candidate_ticker": self._on_candidate_ticker_callback
                is not None,
            },
        }

    def get_monitoring_stats(self) -> Dict[str, any]:
        """
        Retourne les statistiques de surveillance.

        Returns:
            Dict contenant les statistiques d√©taill√©es
        """
        stats = {
            "is_running": self._running,
            "candidate_symbols_count": len(self.candidate_symbols),
        }

        # Ajouter les stats du scanner si disponible
        if self.market_scanner and hasattr(
            self.market_scanner, "get_scan_stats"
        ):
            stats["market_scanner"] = self.market_scanner.get_scan_stats()

        # Ajouter les stats du d√©tecteur si disponible
        if self.opportunity_detector and hasattr(
            self.opportunity_detector, "get_detection_stats"
        ):
            stats["opportunity_detector"] = (
                self.opportunity_detector.get_detection_stats()
            )

        return stats

    def check_components_health(self) -> bool:
        """
        V√©rifie que tous les composants critiques sont en bonne sant√©.

        Returns:
            True si tous les composants sont op√©rationnels
        """
        if not self._running:
            return False

        # V√©rifier le scanner de march√©
        if self.market_scanner and not self.market_scanner.is_running():
            self.logger.warning("‚ö†Ô∏è MarketScanner non op√©rationnel")
            return False

        # V√©rifier le moniteur de candidats (optionnel)
        # Note : le CandidateMonitor peut ne pas √™tre actif si pas de candidats

        return True
