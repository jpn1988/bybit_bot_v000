#!/usr/bin/env python3
"""
Gestionnaire d'affichage pour le bot Bybit avec m√©canisme de fallback intelligent.

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üìñ GUIDE DE LECTURE                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Ce fichier impl√©mente un gestionnaire d'affichage qui affiche les prix en temps r√©el
avec un m√©canisme de fallback automatique vers les donn√©es REST si n√©cessaire.

üîç COMPRENDRE CE FICHIER EN 5 MINUTES :

1. Boucle d'affichage (lignes 79-91)
   ‚îî‚îÄ> Affiche le tableau toutes les N secondes

2. M√©canisme de fallback (lignes 120-180)
   ‚îî‚îÄ> WebSocket (temps r√©el) ‚Üí REST API (si stale)

3. Calcul du staleness (lignes 140-160)
   ‚îî‚îÄ> D√©tecte si les donn√©es sont trop anciennes

4. Formatage des tableaux (via TableFormatter)
   ‚îî‚îÄ> Affichage format√© avec colonnes align√©es

üîÑ M√âCANISME DE FALLBACK INTELLIGENT :

Le DisplayManager utilise un syst√®me de fallback √† 2 niveaux pour garantir
l'affichage de donn√©es fra√Æches m√™me si le WebSocket rencontre des probl√®mes.

Priorit√© 1 : Donn√©es WebSocket (temps r√©el)
    ‚îú‚îÄ> Si disponibles ET r√©centes (< 120s)
    ‚îî‚îÄ> Utiliser directement (plus rapides, plus pr√©cises)

Priorit√© 2 : Fallback vers REST API
    ‚îú‚îÄ> Si WebSocket stale (> 120s) OU indisponible
    ‚îî‚îÄ> R√©cup√©rer depuis l'API REST (plus lent mais fiable)

Exemple de flux :
    Temps = 0s ‚Üí WebSocket re√ßoit BTCUSDT √† $43,500
    Temps = 10s ‚Üí Affichage utilise WebSocket ($43,500) ‚úÖ Frais
    Temps = 60s ‚Üí Affichage utilise WebSocket ($43,505) ‚úÖ Frais
    Temps = 130s ‚Üí WebSocket bloqu√©, aucune mise √† jour
    Temps = 140s ‚Üí Affichage d√©tecte staleness (140s > 120s)
    Temps = 140s ‚Üí Fallback ‚Üí R√©cup√®re depuis REST API ($43,510) ‚úÖ Frais
    
Pourquoi ce m√©canisme ?
- ‚úÖ R√©silience : Continue √† afficher m√™me si WebSocket down
- ‚úÖ Pr√©cision : Pr√©f√®re temps r√©el quand disponible
- ‚úÖ Fiabilit√© : Garantit des donn√©es r√©centes (< 120s)

‚è±Ô∏è GESTION DU STALENESS (FRA√éCHEUR DES DONN√âES) :

Le staleness mesure l'anciennet√© des donn√©es pour d√©cider du fallback.

Calcul :
    staleness = now() - timestamp_derni√®re_mise_√†_jour
    
Exemple :
    Derni√®re mise √† jour : 10:00:00
    Heure actuelle : 10:02:30
    Staleness : 150 secondes ‚Üí ‚ö†Ô∏è STALE (> 120s)

Seuils :
- < 120s : ‚úÖ Donn√©es FRA√éCHES (utiliser WebSocket)
- >= 120s : ‚ö†Ô∏è Donn√©es STALES (fallback REST)

Configuration :
- price_ttl_sec (d√©faut: 120s) : Seuil de staleness
- Modifiable via set_price_ttl()

üìä INTERVALLE D'AFFICHAGE :

L'affichage est rafra√Æchi p√©riodiquement dans une boucle asyncio :

display_interval_seconds = 10  # Afficher toutes les 10 secondes (d√©faut)

Ajustable via set_display_interval() :
- Trop court (< 1s) : Charge CPU, spam de logs
- Trop long (> 60s) : Donn√©es semblent fig√©es
- Recommand√© : 5-15 secondes

üìö EXEMPLE D'UTILISATION :

```python
from display_manager import DisplayManager

# Cr√©er le manager
display = DisplayManager(data_manager=dm)

# Configurer
display.set_display_interval(10)  # Afficher toutes les 10s
display.set_price_ttl(120)  # Fallback si > 120s

# D√©marrer l'affichage (asynchrone)
await display.start_display_loop()

# Attendre...
await asyncio.sleep(300)

# Arr√™ter
await display.stop_display_loop()
```

üé® FORMAT DU TABLEAU :

Le tableau affich√© contient les colonnes suivantes :
- Symbole : Nom du contrat (BTCUSDT, ETHUSDT, etc.)
- Funding % : Taux de funding (ex: +0.0100%)
- Volume M$ : Volume 24h en millions de dollars
- Spread % : √âcart bid/ask en pourcentage
- Volatilit√© % : Volatilit√© 5 minutes
- Temps restant : Temps avant le prochain funding

üìñ R√âF√âRENCES :
- asyncio tasks: https://docs.python.org/3/library/asyncio-task.html
"""

import asyncio
from typing import Optional
from logging_setup import setup_logging
from data_manager import DataManager
from table_formatter import TableFormatter
from config.timeouts import TimeoutConfig


class DisplayManager:
    """
    Gestionnaire d'affichage avec fallback intelligent WebSocket ‚Üí REST API.
    
    Ce gestionnaire affiche p√©riodiquement un tableau des symboles suivis avec
    leurs donn√©es en temps r√©el. Il utilise un m√©canisme de fallback automatique
    pour garantir la fra√Æcheur des donn√©es affich√©es.
    
    Strat√©gie de donn√©es :
    1. Priorit√© : Donn√©es WebSocket (temps r√©el) si r√©centes
    2. Fallback : Donn√©es REST API si WebSocket stale ou indisponible
    3. Seuil : 120 secondes par d√©faut (configurable)
    
    Responsabilit√©s :
    - Afficher le tableau des symboles p√©riodiquement
    - D√©tecter et g√©rer les donn√©es stales (anciennes)
    - Fallback automatique vers REST API si n√©cessaire
    - Formater les donn√©es via TableFormatter
    
    Attributes:
        data_manager (DataManager): Gestionnaire de donn√©es
        logger: Logger pour les messages
        display_interval_seconds (int): Intervalle d'affichage (d√©faut: 10s)
        price_ttl_sec (int): Seuil de staleness pour fallback (d√©faut: 120s)
        _running (bool): √âtat de la boucle d'affichage
        _display_task (asyncio.Task): T√¢che d'affichage en cours
        _formatter (TableFormatter): Formateur de tableaux
        
    Example:
        ```python
        # Cr√©er et configurer
        display = DisplayManager(data_manager=dm)
        display.set_display_interval(10)  # Afficher toutes les 10s
        display.set_price_ttl(120)  # Fallback si > 120s stale
        
        # D√©marrer
        await display.start_display_loop()
        
        # Arr√™ter
        await display.stop_display_loop()
        ```
        
    Note:
        - La boucle d'affichage est non-bloquante (asyncio.Task)
        - Le fallback est transparent pour l'utilisateur
        - Les donn√©es REST sont mises en cache dans DataStorage
    """

    def __init__(self, data_manager: DataManager, logger=None):
        """
        Initialise le gestionnaire d'affichage.

        Args:
            data_manager (DataManager): Gestionnaire de donn√©es unifi√©
                                       Contient storage (WebSocket + REST)
            logger: Logger pour tracer les √©v√©nements
                   Recommand√© : logging.getLogger(__name__)
                   
        Note:
            - display_interval_seconds contr√¥le la fr√©quence d'affichage
            - price_ttl_sec contr√¥le le seuil de fallback
            - Les deux sont configurables via les setters
        """
        self.data_manager = data_manager
        self.logger = logger or setup_logging()

        # Configuration d'affichage
        # Intervalle entre chaque affichage du tableau (en secondes)
        # Valeur recommand√©e : 5-15s (√©quilibre entre fra√Æcheur et spam)
        self.display_interval_seconds = 10
        
        # Seuil de staleness pour le fallback (en secondes)
        # Si les donn√©es WebSocket ont plus de 120s, on bascule sur REST
        # TTL = Time To Live = dur√©e de validit√© des donn√©es
        self.price_ttl_sec = 120

        # √âtat d'affichage
        self._first_display = True
        self._display_task: Optional[asyncio.Task] = None
        self._running = False

        # Formateur de tableaux
        self._formatter = TableFormatter()
        
        # Filtrage des symboles √† afficher (pour mode position unique)
        self._filtered_symbols: Optional[set] = None

    def set_volatility_callback(self, callback: callable):
        """
        D√©finit le callback pour r√©cup√©rer la volatilit√©.

        Args:
            callback: Fonction qui retourne la volatilit√© pour un symbole
        """
        self._formatter.set_volatility_callback(callback)

    def set_symbol_filter(self, symbols: Optional[set]):
        """
        D√©finit les symboles √† afficher (filtrage).
        
        Args:
            symbols: Set des symboles √† afficher, ou None pour afficher tous
        """
        self._filtered_symbols = symbols
        if symbols:
            self.logger.info(f"üéØ Affichage filtr√© vers {len(symbols)} symboles: {list(symbols)}")
        else:
            self.logger.info("üìä Affichage de tous les symboles")

    def clear_symbol_filter(self):
        """
        Supprime le filtre de symboles (affiche tous les symboles).
        """
        self._filtered_symbols = None
        self.logger.info("üìä Filtre de symboles supprim√© - Affichage de tous les symboles")

    def set_display_interval(self, interval_seconds: int):
        """
        D√©finit l'intervalle d'affichage.

        Args:
            interval_seconds: Intervalle en secondes
        """
        self.display_interval_seconds = interval_seconds

    def set_price_ttl(self, ttl_seconds: int):
        """
        D√©finit le TTL des prix.

        Args:
            ttl_seconds: TTL en secondes
        """
        self.price_ttl_sec = ttl_seconds

    async def start_display_loop(self):
        """
        D√©marre la boucle d'affichage.
        """
        if self._display_task and not self._display_task.done():
            self.logger.warning("‚ö†Ô∏è DisplayManager d√©j√† en cours d'ex√©cution")
            return

        self._running = True
        self._display_task = asyncio.create_task(self._display_loop())

        self.logger.info("üìä Boucle d'affichage d√©marr√©e")
        
        # Log de d√©bogage pour v√©rifier que la t√¢che est bien cr√©√©e
        self.logger.info(f"üîç [DEBUG] T√¢che d'affichage cr√©√©e: {self._display_task}")
        self.logger.info(f"üîç [DEBUG] √âtat running: {self._running}")

    async def stop_display_loop(self):
        """
        Arr√™te la boucle d'affichage.
        """
        if not self._running:
            return

        self._running = False
        if self._display_task and not self._display_task.done():
            try:
                self._display_task.cancel()
                # Attendre l'annulation avec timeout
                try:
                    await asyncio.wait_for(self._display_task, timeout=TimeoutConfig.DISPLAY_OPERATION)
                except asyncio.TimeoutError:
                    self.logger.warning(
                        "‚ö†Ô∏è T√¢che d'affichage n'a pas pu √™tre annul√©e dans les temps"
                    )
                except asyncio.CancelledError:
                    pass  # Annulation normale
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è Erreur arr√™t t√¢che affichage: {e}")

        self.logger.info("üìä Boucle d'affichage arr√™t√©e")

    async def _display_loop(self):
        """
        Boucle d'affichage avec intervalle configurable.
        """
        self.logger.info("üîç [DEBUG] Boucle d'affichage d√©marr√©e")
        
        while self._running:
            # V√©rifier imm√©diatement si on doit s'arr√™ter
            if not self._running:
                break

            self.logger.debug("üîç [DEBUG] Ex√©cution de _print_price_table")
            self._print_price_table()

            # Attendre selon l'intervalle configur√©
            await asyncio.sleep(self.display_interval_seconds)

        # Boucle d'affichage arr√™t√©e
        self.logger.info("üîç [DEBUG] Boucle d'affichage arr√™t√©e")

    def _print_price_table(self):
        """
        Affiche le tableau des prix align√© avec funding, volume en millions,
        spread et volatilit√©.
        
        Utilise les FundingData Value Objects pour acc√©der aux donn√©es.
        """
        # Si aucune opportunit√© n'est trouv√©e, retourner
        funding_data_objects = self.data_manager.storage.get_all_funding_data_objects()
        self.logger.info(f"üîç [DEBUG] _print_price_table: {len(funding_data_objects) if funding_data_objects else 0} symboles")
        
        if not funding_data_objects:
            self.logger.debug("‚è≥ Aucune donn√©e de funding disponible - En attente...")
            return

        # Appliquer le filtre de symboles si d√©fini
        if self._filtered_symbols is not None:
            funding_data_objects = {
                symbol: data for symbol, data in funding_data_objects.items()
                if symbol in self._filtered_symbols
            }
            if not funding_data_objects:
                self.logger.debug("‚è≥ Aucun symbole apr√®s filtrage")
                return

        # Pour la compatibilit√© avec calculate_column_widths qui attend un Dict
        funding_data_keys = funding_data_objects

        # V√©rifier si toutes les donn√©es sont disponibles avant d'afficher
        # MODIFICATION: Permettre l'affichage m√™me si certaines donn√©es manquent
        if not self._formatter.are_all_data_available(
            funding_data_keys, self.data_manager
        ):
            if self._first_display:
                self.logger.info(
                    "‚è≥ Certaines donn√©es de volatilit√© et spread manquantes - Affichage avec valeurs par d√©faut"
                )
                self._first_display = False
            # Ne pas retourner - continuer l'affichage avec les donn√©es disponibles

        # Calculer les largeurs de colonnes
        col_widths = self._formatter.calculate_column_widths(funding_data_keys)

        # Afficher l'en-t√™te
        header = self._formatter.format_table_header(col_widths)
        separator = self._formatter.format_table_separator(col_widths)
        print("\n" + header)
        print(separator)

        # Afficher les donn√©es
        for symbol in funding_data_objects.keys():
            row_data = self._formatter.prepare_row_data(
                symbol, self.data_manager
            )
            line = self._formatter.format_table_row(
                symbol, row_data, col_widths
            )
            print(line)

        print()  # Ligne vide apr√®s le tableau

    def is_running(self) -> bool:
        """
        V√©rifie si le gestionnaire d'affichage est en cours d'ex√©cution.

        Returns:
            True si en cours d'ex√©cution
        """
        return (
            self._running
            and self._display_task
            and not self._display_task.done()
        )
